// Copyright (c) 2020 nyorain
// Distributed under the Boost Software License, Version 1.0.
// See accompanying file LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt

// Automaitcally generated vulkan header, see nyorain/vkpp
// Do not edit manually, rather edit the codegen files.

#pragma once

#include <vkpp/fwd.hpp>
#include <vkpp/enums.hpp>
#include <vkpp/structs.hpp>
#include <vkpp/span.hpp>
#include <vkpp/flags.hpp>
#include <vkpp/call.hpp>

#include <vulkan/vulkan.h>

// Generated for vulkan version: 1.1.204
#if !defined(VK_VERSION_1_1) || 204 > VK_HEADER_VERSION
	#error "vulkan.h version too old, does not match generated version"
#endif

namespace vk {
namespace raw {

inline Result getPhysicalDeviceToolProperties(PhysicalDevice physicalDevice, uint32_t* pToolCount, PhysicalDeviceToolProperties* pToolProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceToolProperties, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pToolCount), (VkPhysicalDeviceToolProperties*)(pToolProperties))); }
inline Result getPhysicalDeviceToolPropertiesEXT(PhysicalDevice physicalDevice, uint32_t* pToolCount, PhysicalDeviceToolProperties* pToolProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceToolProperties, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pToolCount), (VkPhysicalDeviceToolProperties*)(pToolProperties))); }
inline Result createPrivateDataSlot(Device device, const PrivateDataSlotCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, PrivateDataSlot* pPrivateDataSlot, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreatePrivateDataSlot, (VkDevice)(device), (const VkPrivateDataSlotCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkPrivateDataSlot*)(pPrivateDataSlot))); }
inline Result createPrivateDataSlotEXT(Device device, const PrivateDataSlotCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, PrivateDataSlot* pPrivateDataSlot, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreatePrivateDataSlot, (VkDevice)(device), (const VkPrivateDataSlotCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkPrivateDataSlot*)(pPrivateDataSlot))); }
inline void destroyPrivateDataSlot(Device device, PrivateDataSlot privateDataSlot, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyPrivateDataSlot, (VkDevice)(device), (VkPrivateDataSlot)(privateDataSlot), (const VkAllocationCallbacks*)(pAllocator))); }
inline void destroyPrivateDataSlotEXT(Device device, PrivateDataSlot privateDataSlot, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyPrivateDataSlot, (VkDevice)(device), (VkPrivateDataSlot)(privateDataSlot), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result setPrivateData(Device device, ObjectType objectType, uint64_t objectHandle, PrivateDataSlot privateDataSlot, uint64_t data, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetPrivateData, (VkDevice)(device), (VkObjectType)(objectType), objectHandle, (VkPrivateDataSlot)(privateDataSlot), data)); }
inline Result setPrivateDataEXT(Device device, ObjectType objectType, uint64_t objectHandle, PrivateDataSlot privateDataSlot, uint64_t data, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetPrivateData, (VkDevice)(device), (VkObjectType)(objectType), objectHandle, (VkPrivateDataSlot)(privateDataSlot), data)); }
inline void getPrivateData(Device device, ObjectType objectType, uint64_t objectHandle, PrivateDataSlot privateDataSlot, uint64_t* pData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPrivateData, (VkDevice)(device), (VkObjectType)(objectType), objectHandle, (VkPrivateDataSlot)(privateDataSlot), (uint64_t*)(pData))); }
inline void getPrivateDataEXT(Device device, ObjectType objectType, uint64_t objectHandle, PrivateDataSlot privateDataSlot, uint64_t* pData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPrivateData, (VkDevice)(device), (VkObjectType)(objectType), objectHandle, (VkPrivateDataSlot)(privateDataSlot), (uint64_t*)(pData))); }
inline void cmdSetEvent2(CommandBuffer commandBuffer, Event event, const DependencyInfo* pDependencyInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetEvent2, (VkCommandBuffer)(commandBuffer), (VkEvent)(event), (const VkDependencyInfo*)(pDependencyInfo))); }
inline void cmdSetEvent2KHR(CommandBuffer commandBuffer, Event event, const DependencyInfo* pDependencyInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetEvent2, (VkCommandBuffer)(commandBuffer), (VkEvent)(event), (const VkDependencyInfo*)(pDependencyInfo))); }
inline void cmdResetEvent2(CommandBuffer commandBuffer, Event event, PipelineStageFlags2 stageMask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdResetEvent2, (VkCommandBuffer)(commandBuffer), (VkEvent)(event), (VkPipelineStageFlags2)(stageMask))); }
inline void cmdResetEvent2KHR(CommandBuffer commandBuffer, Event event, PipelineStageFlags2 stageMask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdResetEvent2, (VkCommandBuffer)(commandBuffer), (VkEvent)(event), (VkPipelineStageFlags2)(stageMask))); }
inline void cmdWaitEvents2(CommandBuffer commandBuffer, uint32_t eventCount, const Event* pEvents, const DependencyInfo* pDependencyInfos, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdWaitEvents2, (VkCommandBuffer)(commandBuffer), eventCount, (const VkEvent*)(pEvents), (const VkDependencyInfo*)(pDependencyInfos))); }
inline void cmdWaitEvents2KHR(CommandBuffer commandBuffer, uint32_t eventCount, const Event* pEvents, const DependencyInfo* pDependencyInfos, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdWaitEvents2, (VkCommandBuffer)(commandBuffer), eventCount, (const VkEvent*)(pEvents), (const VkDependencyInfo*)(pDependencyInfos))); }
inline void cmdPipelineBarrier2(CommandBuffer commandBuffer, const DependencyInfo* pDependencyInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdPipelineBarrier2, (VkCommandBuffer)(commandBuffer), (const VkDependencyInfo*)(pDependencyInfo))); }
inline void cmdPipelineBarrier2KHR(CommandBuffer commandBuffer, const DependencyInfo* pDependencyInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdPipelineBarrier2, (VkCommandBuffer)(commandBuffer), (const VkDependencyInfo*)(pDependencyInfo))); }
inline void cmdWriteTimestamp2(CommandBuffer commandBuffer, PipelineStageFlags2 stage, QueryPool queryPool, uint32_t query, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdWriteTimestamp2, (VkCommandBuffer)(commandBuffer), (VkPipelineStageFlags2)(stage), (VkQueryPool)(queryPool), query)); }
inline void cmdWriteTimestamp2KHR(CommandBuffer commandBuffer, PipelineStageFlags2 stage, QueryPool queryPool, uint32_t query, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdWriteTimestamp2, (VkCommandBuffer)(commandBuffer), (VkPipelineStageFlags2)(stage), (VkQueryPool)(queryPool), query)); }
inline Result queueSubmit2(Queue queue, uint32_t submitCount, const SubmitInfo2* pSubmits, Fence fence, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkQueueSubmit2, (VkQueue)(queue), submitCount, (const VkSubmitInfo2*)(pSubmits), (VkFence)(fence))); }
inline Result queueSubmit2KHR(Queue queue, uint32_t submitCount, const SubmitInfo2* pSubmits, Fence fence, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkQueueSubmit2, (VkQueue)(queue), submitCount, (const VkSubmitInfo2*)(pSubmits), (VkFence)(fence))); }
inline void cmdCopyBuffer2(CommandBuffer commandBuffer, const CopyBufferInfo2* pCopyBufferInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyBuffer2, (VkCommandBuffer)(commandBuffer), (const VkCopyBufferInfo2*)(pCopyBufferInfo))); }
inline void cmdCopyBuffer2KHR(CommandBuffer commandBuffer, const CopyBufferInfo2* pCopyBufferInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyBuffer2, (VkCommandBuffer)(commandBuffer), (const VkCopyBufferInfo2*)(pCopyBufferInfo))); }
inline void cmdCopyImage2(CommandBuffer commandBuffer, const CopyImageInfo2* pCopyImageInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyImage2, (VkCommandBuffer)(commandBuffer), (const VkCopyImageInfo2*)(pCopyImageInfo))); }
inline void cmdCopyImage2KHR(CommandBuffer commandBuffer, const CopyImageInfo2* pCopyImageInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyImage2, (VkCommandBuffer)(commandBuffer), (const VkCopyImageInfo2*)(pCopyImageInfo))); }
inline void cmdCopyBufferToImage2(CommandBuffer commandBuffer, const CopyBufferToImageInfo2* pCopyBufferToImageInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyBufferToImage2, (VkCommandBuffer)(commandBuffer), (const VkCopyBufferToImageInfo2*)(pCopyBufferToImageInfo))); }
inline void cmdCopyBufferToImage2KHR(CommandBuffer commandBuffer, const CopyBufferToImageInfo2* pCopyBufferToImageInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyBufferToImage2, (VkCommandBuffer)(commandBuffer), (const VkCopyBufferToImageInfo2*)(pCopyBufferToImageInfo))); }
inline void cmdCopyImageToBuffer2(CommandBuffer commandBuffer, const CopyImageToBufferInfo2* pCopyImageToBufferInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyImageToBuffer2, (VkCommandBuffer)(commandBuffer), (const VkCopyImageToBufferInfo2*)(pCopyImageToBufferInfo))); }
inline void cmdCopyImageToBuffer2KHR(CommandBuffer commandBuffer, const CopyImageToBufferInfo2* pCopyImageToBufferInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyImageToBuffer2, (VkCommandBuffer)(commandBuffer), (const VkCopyImageToBufferInfo2*)(pCopyImageToBufferInfo))); }
inline void cmdBlitImage2(CommandBuffer commandBuffer, const BlitImageInfo2* pBlitImageInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBlitImage2, (VkCommandBuffer)(commandBuffer), (const VkBlitImageInfo2*)(pBlitImageInfo))); }
inline void cmdBlitImage2KHR(CommandBuffer commandBuffer, const BlitImageInfo2* pBlitImageInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBlitImage2, (VkCommandBuffer)(commandBuffer), (const VkBlitImageInfo2*)(pBlitImageInfo))); }
inline void cmdResolveImage2(CommandBuffer commandBuffer, const ResolveImageInfo2* pResolveImageInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdResolveImage2, (VkCommandBuffer)(commandBuffer), (const VkResolveImageInfo2*)(pResolveImageInfo))); }
inline void cmdResolveImage2KHR(CommandBuffer commandBuffer, const ResolveImageInfo2* pResolveImageInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdResolveImage2, (VkCommandBuffer)(commandBuffer), (const VkResolveImageInfo2*)(pResolveImageInfo))); }
inline void cmdBeginRendering(CommandBuffer commandBuffer, const RenderingInfo* pRenderingInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBeginRendering, (VkCommandBuffer)(commandBuffer), (const VkRenderingInfo*)(pRenderingInfo))); }
inline void cmdBeginRenderingKHR(CommandBuffer commandBuffer, const RenderingInfo* pRenderingInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBeginRendering, (VkCommandBuffer)(commandBuffer), (const VkRenderingInfo*)(pRenderingInfo))); }
inline void cmdEndRendering(CommandBuffer commandBuffer, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdEndRendering, (VkCommandBuffer)(commandBuffer))); }
inline void cmdEndRenderingKHR(CommandBuffer commandBuffer, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdEndRendering, (VkCommandBuffer)(commandBuffer))); }
inline void cmdSetCullMode(CommandBuffer commandBuffer, CullModeFlags cullMode, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetCullMode, (VkCommandBuffer)(commandBuffer), (VkCullModeFlags)(cullMode))); }
inline void cmdSetCullModeEXT(CommandBuffer commandBuffer, CullModeFlags cullMode, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetCullMode, (VkCommandBuffer)(commandBuffer), (VkCullModeFlags)(cullMode))); }
inline void cmdSetFrontFace(CommandBuffer commandBuffer, FrontFace frontFace, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetFrontFace, (VkCommandBuffer)(commandBuffer), (VkFrontFace)(frontFace))); }
inline void cmdSetFrontFaceEXT(CommandBuffer commandBuffer, FrontFace frontFace, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetFrontFace, (VkCommandBuffer)(commandBuffer), (VkFrontFace)(frontFace))); }
inline void cmdSetPrimitiveTopology(CommandBuffer commandBuffer, PrimitiveTopology primitiveTopology, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetPrimitiveTopology, (VkCommandBuffer)(commandBuffer), (VkPrimitiveTopology)(primitiveTopology))); }
inline void cmdSetPrimitiveTopologyEXT(CommandBuffer commandBuffer, PrimitiveTopology primitiveTopology, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetPrimitiveTopology, (VkCommandBuffer)(commandBuffer), (VkPrimitiveTopology)(primitiveTopology))); }
inline void cmdSetViewportWithCount(CommandBuffer commandBuffer, uint32_t viewportCount, const Viewport* pViewports, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetViewportWithCount, (VkCommandBuffer)(commandBuffer), viewportCount, (const VkViewport*)(pViewports))); }
inline void cmdSetViewportWithCountEXT(CommandBuffer commandBuffer, uint32_t viewportCount, const Viewport* pViewports, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetViewportWithCount, (VkCommandBuffer)(commandBuffer), viewportCount, (const VkViewport*)(pViewports))); }
inline void cmdSetScissorWithCount(CommandBuffer commandBuffer, uint32_t scissorCount, const Rect2D* pScissors, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetScissorWithCount, (VkCommandBuffer)(commandBuffer), scissorCount, (const VkRect2D*)(pScissors))); }
inline void cmdSetScissorWithCountEXT(CommandBuffer commandBuffer, uint32_t scissorCount, const Rect2D* pScissors, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetScissorWithCount, (VkCommandBuffer)(commandBuffer), scissorCount, (const VkRect2D*)(pScissors))); }
inline void cmdBindVertexBuffers2(CommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const Buffer* pBuffers, const DeviceSize* pOffsets, const DeviceSize* pSizes, const DeviceSize* pStrides, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBindVertexBuffers2, (VkCommandBuffer)(commandBuffer), firstBinding, bindingCount, (const VkBuffer*)(pBuffers), (const VkDeviceSize*)(pOffsets), (const VkDeviceSize*)(pSizes), (const VkDeviceSize*)(pStrides))); }
inline void cmdBindVertexBuffers2EXT(CommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const Buffer* pBuffers, const DeviceSize* pOffsets, const DeviceSize* pSizes, const DeviceSize* pStrides, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBindVertexBuffers2, (VkCommandBuffer)(commandBuffer), firstBinding, bindingCount, (const VkBuffer*)(pBuffers), (const VkDeviceSize*)(pOffsets), (const VkDeviceSize*)(pSizes), (const VkDeviceSize*)(pStrides))); }
inline void cmdSetDepthTestEnable(CommandBuffer commandBuffer, Bool32 depthTestEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthTestEnable, (VkCommandBuffer)(commandBuffer), depthTestEnable)); }
inline void cmdSetDepthTestEnableEXT(CommandBuffer commandBuffer, Bool32 depthTestEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthTestEnable, (VkCommandBuffer)(commandBuffer), depthTestEnable)); }
inline void cmdSetDepthWriteEnable(CommandBuffer commandBuffer, Bool32 depthWriteEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthWriteEnable, (VkCommandBuffer)(commandBuffer), depthWriteEnable)); }
inline void cmdSetDepthWriteEnableEXT(CommandBuffer commandBuffer, Bool32 depthWriteEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthWriteEnable, (VkCommandBuffer)(commandBuffer), depthWriteEnable)); }
inline void cmdSetDepthCompareOp(CommandBuffer commandBuffer, CompareOp depthCompareOp, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthCompareOp, (VkCommandBuffer)(commandBuffer), (VkCompareOp)(depthCompareOp))); }
inline void cmdSetDepthCompareOpEXT(CommandBuffer commandBuffer, CompareOp depthCompareOp, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthCompareOp, (VkCommandBuffer)(commandBuffer), (VkCompareOp)(depthCompareOp))); }
inline void cmdSetDepthBoundsTestEnable(CommandBuffer commandBuffer, Bool32 depthBoundsTestEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthBoundsTestEnable, (VkCommandBuffer)(commandBuffer), depthBoundsTestEnable)); }
inline void cmdSetDepthBoundsTestEnableEXT(CommandBuffer commandBuffer, Bool32 depthBoundsTestEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthBoundsTestEnable, (VkCommandBuffer)(commandBuffer), depthBoundsTestEnable)); }
inline void cmdSetStencilTestEnable(CommandBuffer commandBuffer, Bool32 stencilTestEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetStencilTestEnable, (VkCommandBuffer)(commandBuffer), stencilTestEnable)); }
inline void cmdSetStencilTestEnableEXT(CommandBuffer commandBuffer, Bool32 stencilTestEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetStencilTestEnable, (VkCommandBuffer)(commandBuffer), stencilTestEnable)); }
inline void cmdSetStencilOp(CommandBuffer commandBuffer, StencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetStencilOp, (VkCommandBuffer)(commandBuffer), (VkStencilFaceFlags)(faceMask), (VkStencilOp)(failOp), (VkStencilOp)(passOp), (VkStencilOp)(depthFailOp), (VkCompareOp)(compareOp))); }
inline void cmdSetStencilOpEXT(CommandBuffer commandBuffer, StencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetStencilOp, (VkCommandBuffer)(commandBuffer), (VkStencilFaceFlags)(faceMask), (VkStencilOp)(failOp), (VkStencilOp)(passOp), (VkStencilOp)(depthFailOp), (VkCompareOp)(compareOp))); }
inline void cmdSetRasterizerDiscardEnable(CommandBuffer commandBuffer, Bool32 rasterizerDiscardEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetRasterizerDiscardEnable, (VkCommandBuffer)(commandBuffer), rasterizerDiscardEnable)); }
inline void cmdSetRasterizerDiscardEnableEXT(CommandBuffer commandBuffer, Bool32 rasterizerDiscardEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetRasterizerDiscardEnable, (VkCommandBuffer)(commandBuffer), rasterizerDiscardEnable)); }
inline void cmdSetDepthBiasEnable(CommandBuffer commandBuffer, Bool32 depthBiasEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthBiasEnable, (VkCommandBuffer)(commandBuffer), depthBiasEnable)); }
inline void cmdSetDepthBiasEnableEXT(CommandBuffer commandBuffer, Bool32 depthBiasEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDepthBiasEnable, (VkCommandBuffer)(commandBuffer), depthBiasEnable)); }
inline void cmdSetPrimitiveRestartEnable(CommandBuffer commandBuffer, Bool32 primitiveRestartEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetPrimitiveRestartEnable, (VkCommandBuffer)(commandBuffer), primitiveRestartEnable)); }
inline void cmdSetPrimitiveRestartEnableEXT(CommandBuffer commandBuffer, Bool32 primitiveRestartEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetPrimitiveRestartEnable, (VkCommandBuffer)(commandBuffer), primitiveRestartEnable)); }
inline void getDeviceBufferMemoryRequirements(Device device, const DeviceBufferMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceBufferMemoryRequirements, (VkDevice)(device), (const VkDeviceBufferMemoryRequirements*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void getDeviceBufferMemoryRequirementsKHR(Device device, const DeviceBufferMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceBufferMemoryRequirements, (VkDevice)(device), (const VkDeviceBufferMemoryRequirements*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void getDeviceImageMemoryRequirements(Device device, const DeviceImageMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceImageMemoryRequirements, (VkDevice)(device), (const VkDeviceImageMemoryRequirements*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void getDeviceImageMemoryRequirementsKHR(Device device, const DeviceImageMemoryRequirements* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceImageMemoryRequirements, (VkDevice)(device), (const VkDeviceImageMemoryRequirements*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void getDeviceImageSparseMemoryRequirements(Device device, const DeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceImageSparseMemoryRequirements, (VkDevice)(device), (const VkDeviceImageMemoryRequirements*)(pInfo), (uint32_t*)(pSparseMemoryRequirementCount), (VkSparseImageMemoryRequirements2*)(pSparseMemoryRequirements))); }
inline void getDeviceImageSparseMemoryRequirementsKHR(Device device, const DeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceImageSparseMemoryRequirements, (VkDevice)(device), (const VkDeviceImageMemoryRequirements*)(pInfo), (uint32_t*)(pSparseMemoryRequirementCount), (VkSparseImageMemoryRequirements2*)(pSparseMemoryRequirements))); }
inline void cmdDrawIndirectCount(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawIndirectCount, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, (VkBuffer)(countBuffer), countBufferOffset, maxDrawCount, stride)); }
inline void cmdDrawIndirectCountKHR(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawIndirectCount, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, (VkBuffer)(countBuffer), countBufferOffset, maxDrawCount, stride)); }
inline void cmdDrawIndirectCountAMD(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawIndirectCount, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, (VkBuffer)(countBuffer), countBufferOffset, maxDrawCount, stride)); }
inline void cmdDrawIndexedIndirectCount(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawIndexedIndirectCount, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, (VkBuffer)(countBuffer), countBufferOffset, maxDrawCount, stride)); }
inline void cmdDrawIndexedIndirectCountKHR(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawIndexedIndirectCount, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, (VkBuffer)(countBuffer), countBufferOffset, maxDrawCount, stride)); }
inline void cmdDrawIndexedIndirectCountAMD(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawIndexedIndirectCount, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, (VkBuffer)(countBuffer), countBufferOffset, maxDrawCount, stride)); }
inline Result createRenderPass2(Device device, const RenderPassCreateInfo2* pCreateInfo, const AllocationCallbacks* pAllocator, RenderPass* pRenderPass, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateRenderPass2, (VkDevice)(device), (const VkRenderPassCreateInfo2*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkRenderPass*)(pRenderPass))); }
inline Result createRenderPass2KHR(Device device, const RenderPassCreateInfo2* pCreateInfo, const AllocationCallbacks* pAllocator, RenderPass* pRenderPass, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateRenderPass2, (VkDevice)(device), (const VkRenderPassCreateInfo2*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkRenderPass*)(pRenderPass))); }
inline void cmdBeginRenderPass2(CommandBuffer commandBuffer, const RenderPassBeginInfo* pRenderPassBegin, const SubpassBeginInfo* pSubpassBeginInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBeginRenderPass2, (VkCommandBuffer)(commandBuffer), (const VkRenderPassBeginInfo*)(pRenderPassBegin), (const VkSubpassBeginInfo*)(pSubpassBeginInfo))); }
inline void cmdBeginRenderPass2KHR(CommandBuffer commandBuffer, const RenderPassBeginInfo* pRenderPassBegin, const SubpassBeginInfo* pSubpassBeginInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBeginRenderPass2, (VkCommandBuffer)(commandBuffer), (const VkRenderPassBeginInfo*)(pRenderPassBegin), (const VkSubpassBeginInfo*)(pSubpassBeginInfo))); }
inline void cmdNextSubpass2(CommandBuffer commandBuffer, const SubpassBeginInfo* pSubpassBeginInfo, const SubpassEndInfo* pSubpassEndInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdNextSubpass2, (VkCommandBuffer)(commandBuffer), (const VkSubpassBeginInfo*)(pSubpassBeginInfo), (const VkSubpassEndInfo*)(pSubpassEndInfo))); }
inline void cmdNextSubpass2KHR(CommandBuffer commandBuffer, const SubpassBeginInfo* pSubpassBeginInfo, const SubpassEndInfo* pSubpassEndInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdNextSubpass2, (VkCommandBuffer)(commandBuffer), (const VkSubpassBeginInfo*)(pSubpassBeginInfo), (const VkSubpassEndInfo*)(pSubpassEndInfo))); }
inline void cmdEndRenderPass2(CommandBuffer commandBuffer, const SubpassEndInfo* pSubpassEndInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdEndRenderPass2, (VkCommandBuffer)(commandBuffer), (const VkSubpassEndInfo*)(pSubpassEndInfo))); }
inline void cmdEndRenderPass2KHR(CommandBuffer commandBuffer, const SubpassEndInfo* pSubpassEndInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdEndRenderPass2, (VkCommandBuffer)(commandBuffer), (const VkSubpassEndInfo*)(pSubpassEndInfo))); }
inline void resetQueryPool(Device device, QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkResetQueryPool, (VkDevice)(device), (VkQueryPool)(queryPool), firstQuery, queryCount)); }
inline void resetQueryPoolEXT(Device device, QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkResetQueryPool, (VkDevice)(device), (VkQueryPool)(queryPool), firstQuery, queryCount)); }
inline Result getSemaphoreCounterValue(Device device, Semaphore semaphore, uint64_t* pValue, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetSemaphoreCounterValue, (VkDevice)(device), (VkSemaphore)(semaphore), (uint64_t*)(pValue))); }
inline Result getSemaphoreCounterValueKHR(Device device, Semaphore semaphore, uint64_t* pValue, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetSemaphoreCounterValue, (VkDevice)(device), (VkSemaphore)(semaphore), (uint64_t*)(pValue))); }
inline Result waitSemaphores(Device device, const SemaphoreWaitInfo* pWaitInfo, uint64_t timeout, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkWaitSemaphores, (VkDevice)(device), (const VkSemaphoreWaitInfo*)(pWaitInfo), timeout)); }
inline Result waitSemaphoresKHR(Device device, const SemaphoreWaitInfo* pWaitInfo, uint64_t timeout, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkWaitSemaphores, (VkDevice)(device), (const VkSemaphoreWaitInfo*)(pWaitInfo), timeout)); }
inline Result signalSemaphore(Device device, const SemaphoreSignalInfo* pSignalInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSignalSemaphore, (VkDevice)(device), (const VkSemaphoreSignalInfo*)(pSignalInfo))); }
inline Result signalSemaphoreKHR(Device device, const SemaphoreSignalInfo* pSignalInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSignalSemaphore, (VkDevice)(device), (const VkSemaphoreSignalInfo*)(pSignalInfo))); }
inline DeviceAddress getBufferDeviceAddress(Device device, const BufferDeviceAddressInfo* pInfo, DynamicDispatch* dispatcher = {}){ return (DeviceAddress)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetBufferDeviceAddress, (VkDevice)(device), (const VkBufferDeviceAddressInfo*)(pInfo))); }
inline DeviceAddress getBufferDeviceAddressKHR(Device device, const BufferDeviceAddressInfo* pInfo, DynamicDispatch* dispatcher = {}){ return (DeviceAddress)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetBufferDeviceAddress, (VkDevice)(device), (const VkBufferDeviceAddressInfo*)(pInfo))); }
inline DeviceAddress getBufferDeviceAddressEXT(Device device, const BufferDeviceAddressInfo* pInfo, DynamicDispatch* dispatcher = {}){ return (DeviceAddress)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetBufferDeviceAddress, (VkDevice)(device), (const VkBufferDeviceAddressInfo*)(pInfo))); }
inline uint64_t getBufferOpaqueCaptureAddress(Device device, const BufferDeviceAddressInfo* pInfo, DynamicDispatch* dispatcher = {}){ return (uint64_t)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetBufferOpaqueCaptureAddress, (VkDevice)(device), (const VkBufferDeviceAddressInfo*)(pInfo))); }
inline uint64_t getBufferOpaqueCaptureAddressKHR(Device device, const BufferDeviceAddressInfo* pInfo, DynamicDispatch* dispatcher = {}){ return (uint64_t)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetBufferOpaqueCaptureAddress, (VkDevice)(device), (const VkBufferDeviceAddressInfo*)(pInfo))); }
inline uint64_t getDeviceMemoryOpaqueCaptureAddress(Device device, const DeviceMemoryOpaqueCaptureAddressInfo* pInfo, DynamicDispatch* dispatcher = {}){ return (uint64_t)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceMemoryOpaqueCaptureAddress, (VkDevice)(device), (const VkDeviceMemoryOpaqueCaptureAddressInfo*)(pInfo))); }
inline uint64_t getDeviceMemoryOpaqueCaptureAddressKHR(Device device, const DeviceMemoryOpaqueCaptureAddressInfo* pInfo, DynamicDispatch* dispatcher = {}){ return (uint64_t)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceMemoryOpaqueCaptureAddress, (VkDevice)(device), (const VkDeviceMemoryOpaqueCaptureAddressInfo*)(pInfo))); }
inline Result enumerateInstanceVersion(uint32_t* pApiVersion, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkEnumerateInstanceVersion, (uint32_t*)(pApiVersion))); }
inline Result bindBufferMemory2(Device device, uint32_t bindInfoCount, const BindBufferMemoryInfo* pBindInfos, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkBindBufferMemory2, (VkDevice)(device), bindInfoCount, (const VkBindBufferMemoryInfo*)(pBindInfos))); }
inline Result bindBufferMemory2KHR(Device device, uint32_t bindInfoCount, const BindBufferMemoryInfo* pBindInfos, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkBindBufferMemory2, (VkDevice)(device), bindInfoCount, (const VkBindBufferMemoryInfo*)(pBindInfos))); }
inline Result bindImageMemory2(Device device, uint32_t bindInfoCount, const BindImageMemoryInfo* pBindInfos, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkBindImageMemory2, (VkDevice)(device), bindInfoCount, (const VkBindImageMemoryInfo*)(pBindInfos))); }
inline Result bindImageMemory2KHR(Device device, uint32_t bindInfoCount, const BindImageMemoryInfo* pBindInfos, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkBindImageMemory2, (VkDevice)(device), bindInfoCount, (const VkBindImageMemoryInfo*)(pBindInfos))); }
inline void getDeviceGroupPeerMemoryFeatures(Device device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, PeerMemoryFeatureFlags* pPeerMemoryFeatures, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceGroupPeerMemoryFeatures, (VkDevice)(device), heapIndex, localDeviceIndex, remoteDeviceIndex, (VkPeerMemoryFeatureFlags*)(pPeerMemoryFeatures))); }
inline void getDeviceGroupPeerMemoryFeaturesKHR(Device device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, PeerMemoryFeatureFlags* pPeerMemoryFeatures, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceGroupPeerMemoryFeatures, (VkDevice)(device), heapIndex, localDeviceIndex, remoteDeviceIndex, (VkPeerMemoryFeatureFlags*)(pPeerMemoryFeatures))); }
inline void cmdSetDeviceMask(CommandBuffer commandBuffer, uint32_t deviceMask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDeviceMask, (VkCommandBuffer)(commandBuffer), deviceMask)); }
inline void cmdSetDeviceMaskKHR(CommandBuffer commandBuffer, uint32_t deviceMask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDeviceMask, (VkCommandBuffer)(commandBuffer), deviceMask)); }
inline void cmdDispatchBase(CommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDispatchBase, (VkCommandBuffer)(commandBuffer), baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)); }
inline void cmdDispatchBaseKHR(CommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDispatchBase, (VkCommandBuffer)(commandBuffer), baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)); }
inline Result enumeratePhysicalDeviceGroups(Instance instance, uint32_t* pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkEnumeratePhysicalDeviceGroups, (VkInstance)(instance), (uint32_t*)(pPhysicalDeviceGroupCount), (VkPhysicalDeviceGroupProperties*)(pPhysicalDeviceGroupProperties))); }
inline Result enumeratePhysicalDeviceGroupsKHR(Instance instance, uint32_t* pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkEnumeratePhysicalDeviceGroups, (VkInstance)(instance), (uint32_t*)(pPhysicalDeviceGroupCount), (VkPhysicalDeviceGroupProperties*)(pPhysicalDeviceGroupProperties))); }
inline void getImageMemoryRequirements2(Device device, const ImageMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetImageMemoryRequirements2, (VkDevice)(device), (const VkImageMemoryRequirementsInfo2*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void getImageMemoryRequirements2KHR(Device device, const ImageMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetImageMemoryRequirements2, (VkDevice)(device), (const VkImageMemoryRequirementsInfo2*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void getBufferMemoryRequirements2(Device device, const BufferMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetBufferMemoryRequirements2, (VkDevice)(device), (const VkBufferMemoryRequirementsInfo2*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void getBufferMemoryRequirements2KHR(Device device, const BufferMemoryRequirementsInfo2* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetBufferMemoryRequirements2, (VkDevice)(device), (const VkBufferMemoryRequirementsInfo2*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void getImageSparseMemoryRequirements2(Device device, const ImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetImageSparseMemoryRequirements2, (VkDevice)(device), (const VkImageSparseMemoryRequirementsInfo2*)(pInfo), (uint32_t*)(pSparseMemoryRequirementCount), (VkSparseImageMemoryRequirements2*)(pSparseMemoryRequirements))); }
inline void getImageSparseMemoryRequirements2KHR(Device device, const ImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, SparseImageMemoryRequirements2* pSparseMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetImageSparseMemoryRequirements2, (VkDevice)(device), (const VkImageSparseMemoryRequirementsInfo2*)(pInfo), (uint32_t*)(pSparseMemoryRequirementCount), (VkSparseImageMemoryRequirements2*)(pSparseMemoryRequirements))); }
inline void getPhysicalDeviceFeatures2(PhysicalDevice physicalDevice, PhysicalDeviceFeatures2* pFeatures, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceFeatures2, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceFeatures2*)(pFeatures))); }
inline void getPhysicalDeviceFeatures2KHR(PhysicalDevice physicalDevice, PhysicalDeviceFeatures2* pFeatures, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceFeatures2, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceFeatures2*)(pFeatures))); }
inline void getPhysicalDeviceProperties2(PhysicalDevice physicalDevice, PhysicalDeviceProperties2* pProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceProperties2, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceProperties2*)(pProperties))); }
inline void getPhysicalDeviceProperties2KHR(PhysicalDevice physicalDevice, PhysicalDeviceProperties2* pProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceProperties2, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceProperties2*)(pProperties))); }
inline void getPhysicalDeviceFormatProperties2(PhysicalDevice physicalDevice, Format format, FormatProperties2* pFormatProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceFormatProperties2, (VkPhysicalDevice)(physicalDevice), (VkFormat)(format), (VkFormatProperties2*)(pFormatProperties))); }
inline void getPhysicalDeviceFormatProperties2KHR(PhysicalDevice physicalDevice, Format format, FormatProperties2* pFormatProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceFormatProperties2, (VkPhysicalDevice)(physicalDevice), (VkFormat)(format), (VkFormatProperties2*)(pFormatProperties))); }
inline Result getPhysicalDeviceImageFormatProperties2(PhysicalDevice physicalDevice, const PhysicalDeviceImageFormatInfo2* pImageFormatInfo, ImageFormatProperties2* pImageFormatProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceImageFormatProperties2, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceImageFormatInfo2*)(pImageFormatInfo), (VkImageFormatProperties2*)(pImageFormatProperties))); }
inline Result getPhysicalDeviceImageFormatProperties2KHR(PhysicalDevice physicalDevice, const PhysicalDeviceImageFormatInfo2* pImageFormatInfo, ImageFormatProperties2* pImageFormatProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceImageFormatProperties2, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceImageFormatInfo2*)(pImageFormatInfo), (VkImageFormatProperties2*)(pImageFormatProperties))); }
inline void getPhysicalDeviceQueueFamilyProperties2(PhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, QueueFamilyProperties2* pQueueFamilyProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceQueueFamilyProperties2, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pQueueFamilyPropertyCount), (VkQueueFamilyProperties2*)(pQueueFamilyProperties))); }
inline void getPhysicalDeviceQueueFamilyProperties2KHR(PhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, QueueFamilyProperties2* pQueueFamilyProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceQueueFamilyProperties2, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pQueueFamilyPropertyCount), (VkQueueFamilyProperties2*)(pQueueFamilyProperties))); }
inline void getPhysicalDeviceMemoryProperties2(PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties2* pMemoryProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceMemoryProperties2, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceMemoryProperties2*)(pMemoryProperties))); }
inline void getPhysicalDeviceMemoryProperties2KHR(PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties2* pMemoryProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceMemoryProperties2, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceMemoryProperties2*)(pMemoryProperties))); }
inline void getPhysicalDeviceSparseImageFormatProperties2(PhysicalDevice physicalDevice, const PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, SparseImageFormatProperties2* pProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSparseImageFormatProperties2, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceSparseImageFormatInfo2*)(pFormatInfo), (uint32_t*)(pPropertyCount), (VkSparseImageFormatProperties2*)(pProperties))); }
inline void getPhysicalDeviceSparseImageFormatProperties2KHR(PhysicalDevice physicalDevice, const PhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, SparseImageFormatProperties2* pProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSparseImageFormatProperties2, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceSparseImageFormatInfo2*)(pFormatInfo), (uint32_t*)(pPropertyCount), (VkSparseImageFormatProperties2*)(pProperties))); }
inline void trimCommandPool(Device device, CommandPool commandPool, CommandPoolTrimFlags flags, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkTrimCommandPool, (VkDevice)(device), (VkCommandPool)(commandPool), (VkCommandPoolTrimFlags)(flags))); }
inline void trimCommandPoolKHR(Device device, CommandPool commandPool, CommandPoolTrimFlags flags, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkTrimCommandPool, (VkDevice)(device), (VkCommandPool)(commandPool), (VkCommandPoolTrimFlags)(flags))); }
inline void getDeviceQueue2(Device device, const DeviceQueueInfo2* pQueueInfo, Queue* pQueue, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceQueue2, (VkDevice)(device), (const VkDeviceQueueInfo2*)(pQueueInfo), (VkQueue*)(pQueue))); }
inline Result createSamplerYcbcrConversion(Device device, const SamplerYcbcrConversionCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, SamplerYcbcrConversion* pYcbcrConversion, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateSamplerYcbcrConversion, (VkDevice)(device), (const VkSamplerYcbcrConversionCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSamplerYcbcrConversion*)(pYcbcrConversion))); }
inline Result createSamplerYcbcrConversionKHR(Device device, const SamplerYcbcrConversionCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, SamplerYcbcrConversion* pYcbcrConversion, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateSamplerYcbcrConversion, (VkDevice)(device), (const VkSamplerYcbcrConversionCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSamplerYcbcrConversion*)(pYcbcrConversion))); }
inline void destroySamplerYcbcrConversion(Device device, SamplerYcbcrConversion ycbcrConversion, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroySamplerYcbcrConversion, (VkDevice)(device), (VkSamplerYcbcrConversion)(ycbcrConversion), (const VkAllocationCallbacks*)(pAllocator))); }
inline void destroySamplerYcbcrConversionKHR(Device device, SamplerYcbcrConversion ycbcrConversion, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroySamplerYcbcrConversion, (VkDevice)(device), (VkSamplerYcbcrConversion)(ycbcrConversion), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createDescriptorUpdateTemplate(Device device, const DescriptorUpdateTemplateCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, DescriptorUpdateTemplate* pDescriptorUpdateTemplate, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateDescriptorUpdateTemplate, (VkDevice)(device), (const VkDescriptorUpdateTemplateCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDescriptorUpdateTemplate*)(pDescriptorUpdateTemplate))); }
inline Result createDescriptorUpdateTemplateKHR(Device device, const DescriptorUpdateTemplateCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, DescriptorUpdateTemplate* pDescriptorUpdateTemplate, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateDescriptorUpdateTemplate, (VkDevice)(device), (const VkDescriptorUpdateTemplateCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDescriptorUpdateTemplate*)(pDescriptorUpdateTemplate))); }
inline void destroyDescriptorUpdateTemplate(Device device, DescriptorUpdateTemplate descriptorUpdateTemplate, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyDescriptorUpdateTemplate, (VkDevice)(device), (VkDescriptorUpdateTemplate)(descriptorUpdateTemplate), (const VkAllocationCallbacks*)(pAllocator))); }
inline void destroyDescriptorUpdateTemplateKHR(Device device, DescriptorUpdateTemplate descriptorUpdateTemplate, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyDescriptorUpdateTemplate, (VkDevice)(device), (VkDescriptorUpdateTemplate)(descriptorUpdateTemplate), (const VkAllocationCallbacks*)(pAllocator))); }
inline void updateDescriptorSetWithTemplate(Device device, DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkUpdateDescriptorSetWithTemplate, (VkDevice)(device), (VkDescriptorSet)(descriptorSet), (VkDescriptorUpdateTemplate)(descriptorUpdateTemplate), (const void*)(pData))); }
inline void updateDescriptorSetWithTemplateKHR(Device device, DescriptorSet descriptorSet, DescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkUpdateDescriptorSetWithTemplate, (VkDevice)(device), (VkDescriptorSet)(descriptorSet), (VkDescriptorUpdateTemplate)(descriptorUpdateTemplate), (const void*)(pData))); }
inline void getPhysicalDeviceExternalBufferProperties(PhysicalDevice physicalDevice, const PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, ExternalBufferProperties* pExternalBufferProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceExternalBufferProperties, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceExternalBufferInfo*)(pExternalBufferInfo), (VkExternalBufferProperties*)(pExternalBufferProperties))); }
inline void getPhysicalDeviceExternalBufferPropertiesKHR(PhysicalDevice physicalDevice, const PhysicalDeviceExternalBufferInfo* pExternalBufferInfo, ExternalBufferProperties* pExternalBufferProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceExternalBufferProperties, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceExternalBufferInfo*)(pExternalBufferInfo), (VkExternalBufferProperties*)(pExternalBufferProperties))); }
inline void getPhysicalDeviceExternalFenceProperties(PhysicalDevice physicalDevice, const PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, ExternalFenceProperties* pExternalFenceProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceExternalFenceProperties, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceExternalFenceInfo*)(pExternalFenceInfo), (VkExternalFenceProperties*)(pExternalFenceProperties))); }
inline void getPhysicalDeviceExternalFencePropertiesKHR(PhysicalDevice physicalDevice, const PhysicalDeviceExternalFenceInfo* pExternalFenceInfo, ExternalFenceProperties* pExternalFenceProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceExternalFenceProperties, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceExternalFenceInfo*)(pExternalFenceInfo), (VkExternalFenceProperties*)(pExternalFenceProperties))); }
inline void getPhysicalDeviceExternalSemaphoreProperties(PhysicalDevice physicalDevice, const PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, ExternalSemaphoreProperties* pExternalSemaphoreProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceExternalSemaphoreProperties, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceExternalSemaphoreInfo*)(pExternalSemaphoreInfo), (VkExternalSemaphoreProperties*)(pExternalSemaphoreProperties))); }
inline void getPhysicalDeviceExternalSemaphorePropertiesKHR(PhysicalDevice physicalDevice, const PhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, ExternalSemaphoreProperties* pExternalSemaphoreProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceExternalSemaphoreProperties, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceExternalSemaphoreInfo*)(pExternalSemaphoreInfo), (VkExternalSemaphoreProperties*)(pExternalSemaphoreProperties))); }
inline void getDescriptorSetLayoutSupport(Device device, const DescriptorSetLayoutCreateInfo* pCreateInfo, DescriptorSetLayoutSupport* pSupport, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDescriptorSetLayoutSupport, (VkDevice)(device), (const VkDescriptorSetLayoutCreateInfo*)(pCreateInfo), (VkDescriptorSetLayoutSupport*)(pSupport))); }
inline void getDescriptorSetLayoutSupportKHR(Device device, const DescriptorSetLayoutCreateInfo* pCreateInfo, DescriptorSetLayoutSupport* pSupport, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDescriptorSetLayoutSupport, (VkDevice)(device), (const VkDescriptorSetLayoutCreateInfo*)(pCreateInfo), (VkDescriptorSetLayoutSupport*)(pSupport))); }
inline Result createInstance(const InstanceCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Instance* pInstance, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateInstance, (const VkInstanceCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkInstance*)(pInstance))); }
inline void destroyInstance(Instance instance, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyInstance, (VkInstance)(instance), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result enumeratePhysicalDevices(Instance instance, uint32_t* pPhysicalDeviceCount, PhysicalDevice* pPhysicalDevices, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkEnumeratePhysicalDevices, (VkInstance)(instance), (uint32_t*)(pPhysicalDeviceCount), (VkPhysicalDevice*)(pPhysicalDevices))); }
inline void getPhysicalDeviceFeatures(PhysicalDevice physicalDevice, PhysicalDeviceFeatures* pFeatures, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetPhysicalDeviceFeatures, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceFeatures*)(pFeatures))); }
inline void getPhysicalDeviceFormatProperties(PhysicalDevice physicalDevice, Format format, FormatProperties* pFormatProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetPhysicalDeviceFormatProperties, (VkPhysicalDevice)(physicalDevice), (VkFormat)(format), (VkFormatProperties*)(pFormatProperties))); }
inline Result getPhysicalDeviceImageFormatProperties(PhysicalDevice physicalDevice, Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags, ImageFormatProperties* pImageFormatProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkGetPhysicalDeviceImageFormatProperties, (VkPhysicalDevice)(physicalDevice), (VkFormat)(format), (VkImageType)(type), (VkImageTiling)(tiling), (VkImageUsageFlags)(usage), (VkImageCreateFlags)(flags), (VkImageFormatProperties*)(pImageFormatProperties))); }
inline void getPhysicalDeviceProperties(PhysicalDevice physicalDevice, PhysicalDeviceProperties* pProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetPhysicalDeviceProperties, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceProperties*)(pProperties))); }
inline void getPhysicalDeviceQueueFamilyProperties(PhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, QueueFamilyProperties* pQueueFamilyProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetPhysicalDeviceQueueFamilyProperties, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pQueueFamilyPropertyCount), (VkQueueFamilyProperties*)(pQueueFamilyProperties))); }
inline void getPhysicalDeviceMemoryProperties(PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties* pMemoryProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetPhysicalDeviceMemoryProperties, (VkPhysicalDevice)(physicalDevice), (VkPhysicalDeviceMemoryProperties*)(pMemoryProperties))); }
inline PFN_vkVoidFunction getInstanceProcAddr(Instance instance, const char* pName, DynamicDispatch* dispatcher = {}){ return (PFN_vkVoidFunction)(VKPP_DISPATCH(dispatcher, vkGetInstanceProcAddr, (VkInstance)(instance), (const char*)(pName))); }
inline PFN_vkVoidFunction getDeviceProcAddr(Device device, const char* pName, DynamicDispatch* dispatcher = {}){ return (PFN_vkVoidFunction)(VKPP_DISPATCH(dispatcher, vkGetDeviceProcAddr, (VkDevice)(device), (const char*)(pName))); }
inline Result createDevice(PhysicalDevice physicalDevice, const DeviceCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Device* pDevice, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateDevice, (VkPhysicalDevice)(physicalDevice), (const VkDeviceCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDevice*)(pDevice))); }
inline void destroyDevice(Device device, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyDevice, (VkDevice)(device), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result enumerateInstanceExtensionProperties(const char* pLayerName, uint32_t* pPropertyCount, ExtensionProperties* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkEnumerateInstanceExtensionProperties, (const char*)(pLayerName), (uint32_t*)(pPropertyCount), (VkExtensionProperties*)(pProperties))); }
inline Result enumerateDeviceExtensionProperties(PhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, ExtensionProperties* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkEnumerateDeviceExtensionProperties, (VkPhysicalDevice)(physicalDevice), (const char*)(pLayerName), (uint32_t*)(pPropertyCount), (VkExtensionProperties*)(pProperties))); }
inline Result enumerateInstanceLayerProperties(uint32_t* pPropertyCount, LayerProperties* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkEnumerateInstanceLayerProperties, (uint32_t*)(pPropertyCount), (VkLayerProperties*)(pProperties))); }
inline Result enumerateDeviceLayerProperties(PhysicalDevice physicalDevice, uint32_t* pPropertyCount, LayerProperties* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkEnumerateDeviceLayerProperties, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pPropertyCount), (VkLayerProperties*)(pProperties))); }
inline void getDeviceQueue(Device device, uint32_t queueFamilyIndex, uint32_t queueIndex, Queue* pQueue, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetDeviceQueue, (VkDevice)(device), queueFamilyIndex, queueIndex, (VkQueue*)(pQueue))); }
inline Result queueSubmit(Queue queue, uint32_t submitCount, const SubmitInfo* pSubmits, Fence fence, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkQueueSubmit, (VkQueue)(queue), submitCount, (const VkSubmitInfo*)(pSubmits), (VkFence)(fence))); }
inline Result queueWaitIdle(Queue queue, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkQueueWaitIdle, (VkQueue)(queue))); }
inline Result deviceWaitIdle(Device device, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkDeviceWaitIdle, (VkDevice)(device))); }
inline Result allocateMemory(Device device, const MemoryAllocateInfo* pAllocateInfo, const AllocationCallbacks* pAllocator, DeviceMemory* pMemory, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkAllocateMemory, (VkDevice)(device), (const VkMemoryAllocateInfo*)(pAllocateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDeviceMemory*)(pMemory))); }
inline void freeMemory(Device device, DeviceMemory memory, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkFreeMemory, (VkDevice)(device), (VkDeviceMemory)(memory), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result mapMemory(Device device, DeviceMemory memory, DeviceSize offset, DeviceSize size, MemoryMapFlags flags, void** ppData, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkMapMemory, (VkDevice)(device), (VkDeviceMemory)(memory), offset, size, (VkMemoryMapFlags)(flags), (void**)(ppData))); }
inline void unmapMemory(Device device, DeviceMemory memory, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkUnmapMemory, (VkDevice)(device), (VkDeviceMemory)(memory))); }
inline Result flushMappedMemoryRanges(Device device, uint32_t memoryRangeCount, const MappedMemoryRange* pMemoryRanges, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkFlushMappedMemoryRanges, (VkDevice)(device), memoryRangeCount, (const VkMappedMemoryRange*)(pMemoryRanges))); }
inline Result invalidateMappedMemoryRanges(Device device, uint32_t memoryRangeCount, const MappedMemoryRange* pMemoryRanges, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkInvalidateMappedMemoryRanges, (VkDevice)(device), memoryRangeCount, (const VkMappedMemoryRange*)(pMemoryRanges))); }
inline void getDeviceMemoryCommitment(Device device, DeviceMemory memory, DeviceSize* pCommittedMemoryInBytes, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetDeviceMemoryCommitment, (VkDevice)(device), (VkDeviceMemory)(memory), (VkDeviceSize*)(pCommittedMemoryInBytes))); }
inline Result bindBufferMemory(Device device, Buffer buffer, DeviceMemory memory, DeviceSize memoryOffset, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkBindBufferMemory, (VkDevice)(device), (VkBuffer)(buffer), (VkDeviceMemory)(memory), memoryOffset)); }
inline Result bindImageMemory(Device device, Image image, DeviceMemory memory, DeviceSize memoryOffset, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkBindImageMemory, (VkDevice)(device), (VkImage)(image), (VkDeviceMemory)(memory), memoryOffset)); }
inline void getBufferMemoryRequirements(Device device, Buffer buffer, MemoryRequirements* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetBufferMemoryRequirements, (VkDevice)(device), (VkBuffer)(buffer), (VkMemoryRequirements*)(pMemoryRequirements))); }
inline void getImageMemoryRequirements(Device device, Image image, MemoryRequirements* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetImageMemoryRequirements, (VkDevice)(device), (VkImage)(image), (VkMemoryRequirements*)(pMemoryRequirements))); }
inline void getImageSparseMemoryRequirements(Device device, Image image, uint32_t* pSparseMemoryRequirementCount, SparseImageMemoryRequirements* pSparseMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetImageSparseMemoryRequirements, (VkDevice)(device), (VkImage)(image), (uint32_t*)(pSparseMemoryRequirementCount), (VkSparseImageMemoryRequirements*)(pSparseMemoryRequirements))); }
inline void getPhysicalDeviceSparseImageFormatProperties(PhysicalDevice physicalDevice, Format format, ImageType type, SampleCountBits samples, ImageUsageFlags usage, ImageTiling tiling, uint32_t* pPropertyCount, SparseImageFormatProperties* pProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetPhysicalDeviceSparseImageFormatProperties, (VkPhysicalDevice)(physicalDevice), (VkFormat)(format), (VkImageType)(type), (VkSampleCountFlagBits)(samples), (VkImageUsageFlags)(usage), (VkImageTiling)(tiling), (uint32_t*)(pPropertyCount), (VkSparseImageFormatProperties*)(pProperties))); }
inline Result queueBindSparse(Queue queue, uint32_t bindInfoCount, const BindSparseInfo* pBindInfo, Fence fence, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkQueueBindSparse, (VkQueue)(queue), bindInfoCount, (const VkBindSparseInfo*)(pBindInfo), (VkFence)(fence))); }
inline Result createFence(Device device, const FenceCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Fence* pFence, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateFence, (VkDevice)(device), (const VkFenceCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkFence*)(pFence))); }
inline void destroyFence(Device device, Fence fence, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyFence, (VkDevice)(device), (VkFence)(fence), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result resetFences(Device device, uint32_t fenceCount, const Fence* pFences, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkResetFences, (VkDevice)(device), fenceCount, (const VkFence*)(pFences))); }
inline Result getFenceStatus(Device device, Fence fence, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkGetFenceStatus, (VkDevice)(device), (VkFence)(fence))); }
inline Result waitForFences(Device device, uint32_t fenceCount, const Fence* pFences, Bool32 waitAll, uint64_t timeout, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkWaitForFences, (VkDevice)(device), fenceCount, (const VkFence*)(pFences), waitAll, timeout)); }
inline Result createSemaphore(Device device, const SemaphoreCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Semaphore* pSemaphore, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateSemaphore, (VkDevice)(device), (const VkSemaphoreCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSemaphore*)(pSemaphore))); }
inline void destroySemaphore(Device device, Semaphore semaphore, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroySemaphore, (VkDevice)(device), (VkSemaphore)(semaphore), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createEvent(Device device, const EventCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Event* pEvent, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateEvent, (VkDevice)(device), (const VkEventCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkEvent*)(pEvent))); }
inline void destroyEvent(Device device, Event event, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyEvent, (VkDevice)(device), (VkEvent)(event), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result getEventStatus(Device device, Event event, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkGetEventStatus, (VkDevice)(device), (VkEvent)(event))); }
inline Result setEvent(Device device, Event event, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkSetEvent, (VkDevice)(device), (VkEvent)(event))); }
inline Result resetEvent(Device device, Event event, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkResetEvent, (VkDevice)(device), (VkEvent)(event))); }
inline Result createQueryPool(Device device, const QueryPoolCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, QueryPool* pQueryPool, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateQueryPool, (VkDevice)(device), (const VkQueryPoolCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkQueryPool*)(pQueryPool))); }
inline void destroyQueryPool(Device device, QueryPool queryPool, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyQueryPool, (VkDevice)(device), (VkQueryPool)(queryPool), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result getQueryPoolResults(Device device, QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, DeviceSize stride, QueryResultFlags flags, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkGetQueryPoolResults, (VkDevice)(device), (VkQueryPool)(queryPool), firstQuery, queryCount, dataSize, (void*)(pData), stride, (VkQueryResultFlags)(flags))); }
inline Result createBuffer(Device device, const BufferCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Buffer* pBuffer, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateBuffer, (VkDevice)(device), (const VkBufferCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkBuffer*)(pBuffer))); }
inline void destroyBuffer(Device device, Buffer buffer, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyBuffer, (VkDevice)(device), (VkBuffer)(buffer), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createBufferView(Device device, const BufferViewCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, BufferView* pView, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateBufferView, (VkDevice)(device), (const VkBufferViewCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkBufferView*)(pView))); }
inline void destroyBufferView(Device device, BufferView bufferView, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyBufferView, (VkDevice)(device), (VkBufferView)(bufferView), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createImage(Device device, const ImageCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Image* pImage, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateImage, (VkDevice)(device), (const VkImageCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkImage*)(pImage))); }
inline void destroyImage(Device device, Image image, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyImage, (VkDevice)(device), (VkImage)(image), (const VkAllocationCallbacks*)(pAllocator))); }
inline void getImageSubresourceLayout(Device device, Image image, const ImageSubresource* pSubresource, SubresourceLayout* pLayout, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetImageSubresourceLayout, (VkDevice)(device), (VkImage)(image), (const VkImageSubresource*)(pSubresource), (VkSubresourceLayout*)(pLayout))); }
inline Result createImageView(Device device, const ImageViewCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, ImageView* pView, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateImageView, (VkDevice)(device), (const VkImageViewCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkImageView*)(pView))); }
inline void destroyImageView(Device device, ImageView imageView, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyImageView, (VkDevice)(device), (VkImageView)(imageView), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createShaderModule(Device device, const ShaderModuleCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, ShaderModule* pShaderModule, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateShaderModule, (VkDevice)(device), (const VkShaderModuleCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkShaderModule*)(pShaderModule))); }
inline void destroyShaderModule(Device device, ShaderModule shaderModule, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyShaderModule, (VkDevice)(device), (VkShaderModule)(shaderModule), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createPipelineCache(Device device, const PipelineCacheCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, PipelineCache* pPipelineCache, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreatePipelineCache, (VkDevice)(device), (const VkPipelineCacheCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkPipelineCache*)(pPipelineCache))); }
inline void destroyPipelineCache(Device device, PipelineCache pipelineCache, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyPipelineCache, (VkDevice)(device), (VkPipelineCache)(pipelineCache), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result getPipelineCacheData(Device device, PipelineCache pipelineCache, size_t* pDataSize, void* pData, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkGetPipelineCacheData, (VkDevice)(device), (VkPipelineCache)(pipelineCache), (size_t*)(pDataSize), (void*)(pData))); }
inline Result mergePipelineCaches(Device device, PipelineCache dstCache, uint32_t srcCacheCount, const PipelineCache* pSrcCaches, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkMergePipelineCaches, (VkDevice)(device), (VkPipelineCache)(dstCache), srcCacheCount, (const VkPipelineCache*)(pSrcCaches))); }
inline Result createGraphicsPipelines(Device device, PipelineCache pipelineCache, uint32_t createInfoCount, const GraphicsPipelineCreateInfo* pCreateInfos, const AllocationCallbacks* pAllocator, Pipeline* pPipelines, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateGraphicsPipelines, (VkDevice)(device), (VkPipelineCache)(pipelineCache), createInfoCount, (const VkGraphicsPipelineCreateInfo*)(pCreateInfos), (const VkAllocationCallbacks*)(pAllocator), (VkPipeline*)(pPipelines))); }
inline Result createComputePipelines(Device device, PipelineCache pipelineCache, uint32_t createInfoCount, const ComputePipelineCreateInfo* pCreateInfos, const AllocationCallbacks* pAllocator, Pipeline* pPipelines, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateComputePipelines, (VkDevice)(device), (VkPipelineCache)(pipelineCache), createInfoCount, (const VkComputePipelineCreateInfo*)(pCreateInfos), (const VkAllocationCallbacks*)(pAllocator), (VkPipeline*)(pPipelines))); }
inline void destroyPipeline(Device device, Pipeline pipeline, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyPipeline, (VkDevice)(device), (VkPipeline)(pipeline), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createPipelineLayout(Device device, const PipelineLayoutCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, PipelineLayout* pPipelineLayout, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreatePipelineLayout, (VkDevice)(device), (const VkPipelineLayoutCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkPipelineLayout*)(pPipelineLayout))); }
inline void destroyPipelineLayout(Device device, PipelineLayout pipelineLayout, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyPipelineLayout, (VkDevice)(device), (VkPipelineLayout)(pipelineLayout), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createSampler(Device device, const SamplerCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Sampler* pSampler, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateSampler, (VkDevice)(device), (const VkSamplerCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSampler*)(pSampler))); }
inline void destroySampler(Device device, Sampler sampler, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroySampler, (VkDevice)(device), (VkSampler)(sampler), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createDescriptorSetLayout(Device device, const DescriptorSetLayoutCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, DescriptorSetLayout* pSetLayout, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateDescriptorSetLayout, (VkDevice)(device), (const VkDescriptorSetLayoutCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDescriptorSetLayout*)(pSetLayout))); }
inline void destroyDescriptorSetLayout(Device device, DescriptorSetLayout descriptorSetLayout, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyDescriptorSetLayout, (VkDevice)(device), (VkDescriptorSetLayout)(descriptorSetLayout), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createDescriptorPool(Device device, const DescriptorPoolCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, DescriptorPool* pDescriptorPool, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateDescriptorPool, (VkDevice)(device), (const VkDescriptorPoolCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDescriptorPool*)(pDescriptorPool))); }
inline void destroyDescriptorPool(Device device, DescriptorPool descriptorPool, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyDescriptorPool, (VkDevice)(device), (VkDescriptorPool)(descriptorPool), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result resetDescriptorPool(Device device, DescriptorPool descriptorPool, DescriptorPoolResetFlags flags, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkResetDescriptorPool, (VkDevice)(device), (VkDescriptorPool)(descriptorPool), (VkDescriptorPoolResetFlags)(flags))); }
inline Result allocateDescriptorSets(Device device, const DescriptorSetAllocateInfo* pAllocateInfo, DescriptorSet* pDescriptorSets, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkAllocateDescriptorSets, (VkDevice)(device), (const VkDescriptorSetAllocateInfo*)(pAllocateInfo), (VkDescriptorSet*)(pDescriptorSets))); }
inline Result freeDescriptorSets(Device device, DescriptorPool descriptorPool, uint32_t descriptorSetCount, const DescriptorSet* pDescriptorSets, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkFreeDescriptorSets, (VkDevice)(device), (VkDescriptorPool)(descriptorPool), descriptorSetCount, (const VkDescriptorSet*)(pDescriptorSets))); }
inline void updateDescriptorSets(Device device, uint32_t descriptorWriteCount, const WriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const CopyDescriptorSet* pDescriptorCopies, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkUpdateDescriptorSets, (VkDevice)(device), descriptorWriteCount, (const VkWriteDescriptorSet*)(pDescriptorWrites), descriptorCopyCount, (const VkCopyDescriptorSet*)(pDescriptorCopies))); }
inline Result createFramebuffer(Device device, const FramebufferCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, Framebuffer* pFramebuffer, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateFramebuffer, (VkDevice)(device), (const VkFramebufferCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkFramebuffer*)(pFramebuffer))); }
inline void destroyFramebuffer(Device device, Framebuffer framebuffer, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyFramebuffer, (VkDevice)(device), (VkFramebuffer)(framebuffer), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result createRenderPass(Device device, const RenderPassCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, RenderPass* pRenderPass, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateRenderPass, (VkDevice)(device), (const VkRenderPassCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkRenderPass*)(pRenderPass))); }
inline void destroyRenderPass(Device device, RenderPass renderPass, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyRenderPass, (VkDevice)(device), (VkRenderPass)(renderPass), (const VkAllocationCallbacks*)(pAllocator))); }
inline void getRenderAreaGranularity(Device device, RenderPass renderPass, Extent2D* pGranularity, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkGetRenderAreaGranularity, (VkDevice)(device), (VkRenderPass)(renderPass), (VkExtent2D*)(pGranularity))); }
inline Result createCommandPool(Device device, const CommandPoolCreateInfo* pCreateInfo, const AllocationCallbacks* pAllocator, CommandPool* pCommandPool, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkCreateCommandPool, (VkDevice)(device), (const VkCommandPoolCreateInfo*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkCommandPool*)(pCommandPool))); }
inline void destroyCommandPool(Device device, CommandPool commandPool, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkDestroyCommandPool, (VkDevice)(device), (VkCommandPool)(commandPool), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result resetCommandPool(Device device, CommandPool commandPool, CommandPoolResetFlags flags, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkResetCommandPool, (VkDevice)(device), (VkCommandPool)(commandPool), (VkCommandPoolResetFlags)(flags))); }
inline Result allocateCommandBuffers(Device device, const CommandBufferAllocateInfo* pAllocateInfo, CommandBuffer* pCommandBuffers, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkAllocateCommandBuffers, (VkDevice)(device), (const VkCommandBufferAllocateInfo*)(pAllocateInfo), (VkCommandBuffer*)(pCommandBuffers))); }
inline void freeCommandBuffers(Device device, CommandPool commandPool, uint32_t commandBufferCount, const CommandBuffer* pCommandBuffers, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkFreeCommandBuffers, (VkDevice)(device), (VkCommandPool)(commandPool), commandBufferCount, (const VkCommandBuffer*)(pCommandBuffers))); }
inline Result beginCommandBuffer(CommandBuffer commandBuffer, const CommandBufferBeginInfo* pBeginInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkBeginCommandBuffer, (VkCommandBuffer)(commandBuffer), (const VkCommandBufferBeginInfo*)(pBeginInfo))); }
inline Result endCommandBuffer(CommandBuffer commandBuffer, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkEndCommandBuffer, (VkCommandBuffer)(commandBuffer))); }
inline Result resetCommandBuffer(CommandBuffer commandBuffer, CommandBufferResetFlags flags, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH(dispatcher, vkResetCommandBuffer, (VkCommandBuffer)(commandBuffer), (VkCommandBufferResetFlags)(flags))); }
inline void cmdBindPipeline(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdBindPipeline, (VkCommandBuffer)(commandBuffer), (VkPipelineBindPoint)(pipelineBindPoint), (VkPipeline)(pipeline))); }
inline void cmdSetViewport(CommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const Viewport* pViewports, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetViewport, (VkCommandBuffer)(commandBuffer), firstViewport, viewportCount, (const VkViewport*)(pViewports))); }
inline void cmdSetScissor(CommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const Rect2D* pScissors, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetScissor, (VkCommandBuffer)(commandBuffer), firstScissor, scissorCount, (const VkRect2D*)(pScissors))); }
inline void cmdSetLineWidth(CommandBuffer commandBuffer, float lineWidth, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetLineWidth, (VkCommandBuffer)(commandBuffer), lineWidth)); }
inline void cmdSetDepthBias(CommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetDepthBias, (VkCommandBuffer)(commandBuffer), depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)); }
inline void cmdSetBlendConstants(CommandBuffer commandBuffer, const float blendConstants[ 4], DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetBlendConstants, (VkCommandBuffer)(commandBuffer), blendConstants)); }
inline void cmdSetDepthBounds(CommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetDepthBounds, (VkCommandBuffer)(commandBuffer), minDepthBounds, maxDepthBounds)); }
inline void cmdSetStencilCompareMask(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint32_t compareMask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetStencilCompareMask, (VkCommandBuffer)(commandBuffer), (VkStencilFaceFlags)(faceMask), compareMask)); }
inline void cmdSetStencilWriteMask(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint32_t writeMask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetStencilWriteMask, (VkCommandBuffer)(commandBuffer), (VkStencilFaceFlags)(faceMask), writeMask)); }
inline void cmdSetStencilReference(CommandBuffer commandBuffer, StencilFaceFlags faceMask, uint32_t reference, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetStencilReference, (VkCommandBuffer)(commandBuffer), (VkStencilFaceFlags)(faceMask), reference)); }
inline void cmdBindDescriptorSets(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const DescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdBindDescriptorSets, (VkCommandBuffer)(commandBuffer), (VkPipelineBindPoint)(pipelineBindPoint), (VkPipelineLayout)(layout), firstSet, descriptorSetCount, (const VkDescriptorSet*)(pDescriptorSets), dynamicOffsetCount, (const uint32_t*)(pDynamicOffsets))); }
inline void cmdBindIndexBuffer(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, IndexType indexType, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdBindIndexBuffer, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, (VkIndexType)(indexType))); }
inline void cmdBindVertexBuffers(CommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const Buffer* pBuffers, const DeviceSize* pOffsets, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdBindVertexBuffers, (VkCommandBuffer)(commandBuffer), firstBinding, bindingCount, (const VkBuffer*)(pBuffers), (const VkDeviceSize*)(pOffsets))); }
inline void cmdDraw(CommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdDraw, (VkCommandBuffer)(commandBuffer), vertexCount, instanceCount, firstVertex, firstInstance)); }
inline void cmdDrawIndexed(CommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdDrawIndexed, (VkCommandBuffer)(commandBuffer), indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)); }
inline void cmdDrawIndirect(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint32_t drawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdDrawIndirect, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, drawCount, stride)); }
inline void cmdDrawIndexedIndirect(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint32_t drawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdDrawIndexedIndirect, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, drawCount, stride)); }
inline void cmdDispatch(CommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdDispatch, (VkCommandBuffer)(commandBuffer), groupCountX, groupCountY, groupCountZ)); }
inline void cmdDispatchIndirect(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdDispatchIndirect, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset)); }
inline void cmdCopyBuffer(CommandBuffer commandBuffer, Buffer srcBuffer, Buffer dstBuffer, uint32_t regionCount, const BufferCopy* pRegions, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdCopyBuffer, (VkCommandBuffer)(commandBuffer), (VkBuffer)(srcBuffer), (VkBuffer)(dstBuffer), regionCount, (const VkBufferCopy*)(pRegions))); }
inline void cmdCopyImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint32_t regionCount, const ImageCopy* pRegions, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdCopyImage, (VkCommandBuffer)(commandBuffer), (VkImage)(srcImage), (VkImageLayout)(srcImageLayout), (VkImage)(dstImage), (VkImageLayout)(dstImageLayout), regionCount, (const VkImageCopy*)(pRegions))); }
inline void cmdBlitImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint32_t regionCount, const ImageBlit* pRegions, Filter filter, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdBlitImage, (VkCommandBuffer)(commandBuffer), (VkImage)(srcImage), (VkImageLayout)(srcImageLayout), (VkImage)(dstImage), (VkImageLayout)(dstImageLayout), regionCount, (const VkImageBlit*)(pRegions), (VkFilter)(filter))); }
inline void cmdCopyBufferToImage(CommandBuffer commandBuffer, Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, uint32_t regionCount, const BufferImageCopy* pRegions, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdCopyBufferToImage, (VkCommandBuffer)(commandBuffer), (VkBuffer)(srcBuffer), (VkImage)(dstImage), (VkImageLayout)(dstImageLayout), regionCount, (const VkBufferImageCopy*)(pRegions))); }
inline void cmdCopyImageToBuffer(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, uint32_t regionCount, const BufferImageCopy* pRegions, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdCopyImageToBuffer, (VkCommandBuffer)(commandBuffer), (VkImage)(srcImage), (VkImageLayout)(srcImageLayout), (VkBuffer)(dstBuffer), regionCount, (const VkBufferImageCopy*)(pRegions))); }
inline void cmdUpdateBuffer(CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize dataSize, const void* pData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdUpdateBuffer, (VkCommandBuffer)(commandBuffer), (VkBuffer)(dstBuffer), dstOffset, dataSize, (const void*)(pData))); }
inline void cmdFillBuffer(CommandBuffer commandBuffer, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize size, uint32_t data, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdFillBuffer, (VkCommandBuffer)(commandBuffer), (VkBuffer)(dstBuffer), dstOffset, size, data)); }
inline void cmdClearColorImage(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, const ClearColorValue* pColor, uint32_t rangeCount, const ImageSubresourceRange* pRanges, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdClearColorImage, (VkCommandBuffer)(commandBuffer), (VkImage)(image), (VkImageLayout)(imageLayout), (const VkClearColorValue*)(pColor), rangeCount, (const VkImageSubresourceRange*)(pRanges))); }
inline void cmdClearDepthStencilImage(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, const ClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const ImageSubresourceRange* pRanges, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdClearDepthStencilImage, (VkCommandBuffer)(commandBuffer), (VkImage)(image), (VkImageLayout)(imageLayout), (const VkClearDepthStencilValue*)(pDepthStencil), rangeCount, (const VkImageSubresourceRange*)(pRanges))); }
inline void cmdClearAttachments(CommandBuffer commandBuffer, uint32_t attachmentCount, const ClearAttachment* pAttachments, uint32_t rectCount, const ClearRect* pRects, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdClearAttachments, (VkCommandBuffer)(commandBuffer), attachmentCount, (const VkClearAttachment*)(pAttachments), rectCount, (const VkClearRect*)(pRects))); }
inline void cmdResolveImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint32_t regionCount, const ImageResolve* pRegions, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdResolveImage, (VkCommandBuffer)(commandBuffer), (VkImage)(srcImage), (VkImageLayout)(srcImageLayout), (VkImage)(dstImage), (VkImageLayout)(dstImageLayout), regionCount, (const VkImageResolve*)(pRegions))); }
inline void cmdSetEvent(CommandBuffer commandBuffer, Event event, PipelineStageFlags stageMask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdSetEvent, (VkCommandBuffer)(commandBuffer), (VkEvent)(event), (VkPipelineStageFlags)(stageMask))); }
inline void cmdResetEvent(CommandBuffer commandBuffer, Event event, PipelineStageFlags stageMask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdResetEvent, (VkCommandBuffer)(commandBuffer), (VkEvent)(event), (VkPipelineStageFlags)(stageMask))); }
inline void cmdWaitEvents(CommandBuffer commandBuffer, uint32_t eventCount, const Event* pEvents, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const ImageMemoryBarrier* pImageMemoryBarriers, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdWaitEvents, (VkCommandBuffer)(commandBuffer), eventCount, (const VkEvent*)(pEvents), (VkPipelineStageFlags)(srcStageMask), (VkPipelineStageFlags)(dstStageMask), memoryBarrierCount, (const VkMemoryBarrier*)(pMemoryBarriers), bufferMemoryBarrierCount, (const VkBufferMemoryBarrier*)(pBufferMemoryBarriers), imageMemoryBarrierCount, (const VkImageMemoryBarrier*)(pImageMemoryBarriers))); }
inline void cmdPipelineBarrier(CommandBuffer commandBuffer, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const ImageMemoryBarrier* pImageMemoryBarriers, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdPipelineBarrier, (VkCommandBuffer)(commandBuffer), (VkPipelineStageFlags)(srcStageMask), (VkPipelineStageFlags)(dstStageMask), (VkDependencyFlags)(dependencyFlags), memoryBarrierCount, (const VkMemoryBarrier*)(pMemoryBarriers), bufferMemoryBarrierCount, (const VkBufferMemoryBarrier*)(pBufferMemoryBarriers), imageMemoryBarrierCount, (const VkImageMemoryBarrier*)(pImageMemoryBarriers))); }
inline void cmdBeginQuery(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t query, QueryControlFlags flags, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdBeginQuery, (VkCommandBuffer)(commandBuffer), (VkQueryPool)(queryPool), query, (VkQueryControlFlags)(flags))); }
inline void cmdEndQuery(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t query, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdEndQuery, (VkCommandBuffer)(commandBuffer), (VkQueryPool)(queryPool), query)); }
inline void cmdResetQueryPool(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdResetQueryPool, (VkCommandBuffer)(commandBuffer), (VkQueryPool)(queryPool), firstQuery, queryCount)); }
inline void cmdWriteTimestamp(CommandBuffer commandBuffer, PipelineStageBits pipelineStage, QueryPool queryPool, uint32_t query, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdWriteTimestamp, (VkCommandBuffer)(commandBuffer), (VkPipelineStageFlagBits)(pipelineStage), (VkQueryPool)(queryPool), query)); }
inline void cmdCopyQueryPoolResults(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize stride, QueryResultFlags flags, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdCopyQueryPoolResults, (VkCommandBuffer)(commandBuffer), (VkQueryPool)(queryPool), firstQuery, queryCount, (VkBuffer)(dstBuffer), dstOffset, stride, (VkQueryResultFlags)(flags))); }
inline void cmdPushConstants(CommandBuffer commandBuffer, PipelineLayout layout, ShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdPushConstants, (VkCommandBuffer)(commandBuffer), (VkPipelineLayout)(layout), (VkShaderStageFlags)(stageFlags), offset, size, (const void*)(pValues))); }
inline void cmdBeginRenderPass(CommandBuffer commandBuffer, const RenderPassBeginInfo* pRenderPassBegin, SubpassContents contents, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdBeginRenderPass, (VkCommandBuffer)(commandBuffer), (const VkRenderPassBeginInfo*)(pRenderPassBegin), (VkSubpassContents)(contents))); }
inline void cmdNextSubpass(CommandBuffer commandBuffer, SubpassContents contents, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdNextSubpass, (VkCommandBuffer)(commandBuffer), (VkSubpassContents)(contents))); }
inline void cmdEndRenderPass(CommandBuffer commandBuffer, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdEndRenderPass, (VkCommandBuffer)(commandBuffer))); }
inline void cmdExecuteCommands(CommandBuffer commandBuffer, uint32_t commandBufferCount, const CommandBuffer* pCommandBuffers, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH(dispatcher, vkCmdExecuteCommands, (VkCommandBuffer)(commandBuffer), commandBufferCount, (const VkCommandBuffer*)(pCommandBuffers))); }
inline void destroySurfaceKHR(Instance instance, SurfaceKHR surface, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroySurfaceKHR, (VkInstance)(instance), (VkSurfaceKHR)(surface), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result getPhysicalDeviceSurfaceSupportKHR(PhysicalDevice physicalDevice, uint32_t queueFamilyIndex, SurfaceKHR surface, Bool32* pSupported, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSurfaceSupportKHR, (VkPhysicalDevice)(physicalDevice), queueFamilyIndex, (VkSurfaceKHR)(surface), (VkBool32*)(pSupported))); }
inline Result getPhysicalDeviceSurfaceCapabilitiesKHR(PhysicalDevice physicalDevice, SurfaceKHR surface, SurfaceCapabilitiesKHR* pSurfaceCapabilities, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSurfaceCapabilitiesKHR, (VkPhysicalDevice)(physicalDevice), (VkSurfaceKHR)(surface), (VkSurfaceCapabilitiesKHR*)(pSurfaceCapabilities))); }
inline Result getPhysicalDeviceSurfaceFormatsKHR(PhysicalDevice physicalDevice, SurfaceKHR surface, uint32_t* pSurfaceFormatCount, SurfaceFormatKHR* pSurfaceFormats, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSurfaceFormatsKHR, (VkPhysicalDevice)(physicalDevice), (VkSurfaceKHR)(surface), (uint32_t*)(pSurfaceFormatCount), (VkSurfaceFormatKHR*)(pSurfaceFormats))); }
inline Result getPhysicalDeviceSurfacePresentModesKHR(PhysicalDevice physicalDevice, SurfaceKHR surface, uint32_t* pPresentModeCount, PresentModeKHR* pPresentModes, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSurfacePresentModesKHR, (VkPhysicalDevice)(physicalDevice), (VkSurfaceKHR)(surface), (uint32_t*)(pPresentModeCount), (VkPresentModeKHR*)(pPresentModes))); }
inline Result createSwapchainKHR(Device device, const SwapchainCreateInfoKHR* pCreateInfo, const AllocationCallbacks* pAllocator, SwapchainKHR* pSwapchain, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateSwapchainKHR, (VkDevice)(device), (const VkSwapchainCreateInfoKHR*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSwapchainKHR*)(pSwapchain))); }
inline void destroySwapchainKHR(Device device, SwapchainKHR swapchain, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroySwapchainKHR, (VkDevice)(device), (VkSwapchainKHR)(swapchain), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result getSwapchainImagesKHR(Device device, SwapchainKHR swapchain, uint32_t* pSwapchainImageCount, Image* pSwapchainImages, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetSwapchainImagesKHR, (VkDevice)(device), (VkSwapchainKHR)(swapchain), (uint32_t*)(pSwapchainImageCount), (VkImage*)(pSwapchainImages))); }
inline Result acquireNextImageKHR(Device device, SwapchainKHR swapchain, uint64_t timeout, Semaphore semaphore, Fence fence, uint32_t* pImageIndex, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkAcquireNextImageKHR, (VkDevice)(device), (VkSwapchainKHR)(swapchain), timeout, (VkSemaphore)(semaphore), (VkFence)(fence), (uint32_t*)(pImageIndex))); }
inline Result queuePresentKHR(Queue queue, const PresentInfoKHR* pPresentInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkQueuePresentKHR, (VkQueue)(queue), (const VkPresentInfoKHR*)(pPresentInfo))); }
inline Result getDeviceGroupPresentCapabilitiesKHR(Device device, DeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceGroupPresentCapabilitiesKHR, (VkDevice)(device), (VkDeviceGroupPresentCapabilitiesKHR*)(pDeviceGroupPresentCapabilities))); }
inline Result getDeviceGroupSurfacePresentModesKHR(Device device, SurfaceKHR surface, DeviceGroupPresentModeFlagsKHR* pModes, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceGroupSurfacePresentModesKHR, (VkDevice)(device), (VkSurfaceKHR)(surface), (VkDeviceGroupPresentModeFlagsKHR*)(pModes))); }
inline Result getPhysicalDevicePresentRectanglesKHR(PhysicalDevice physicalDevice, SurfaceKHR surface, uint32_t* pRectCount, Rect2D* pRects, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDevicePresentRectanglesKHR, (VkPhysicalDevice)(physicalDevice), (VkSurfaceKHR)(surface), (uint32_t*)(pRectCount), (VkRect2D*)(pRects))); }
inline Result acquireNextImage2KHR(Device device, const AcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkAcquireNextImage2KHR, (VkDevice)(device), (const VkAcquireNextImageInfoKHR*)(pAcquireInfo), (uint32_t*)(pImageIndex))); }
inline Result getPhysicalDeviceDisplayPropertiesKHR(PhysicalDevice physicalDevice, uint32_t* pPropertyCount, DisplayPropertiesKHR* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceDisplayPropertiesKHR, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pPropertyCount), (VkDisplayPropertiesKHR*)(pProperties))); }
inline Result getPhysicalDeviceDisplayPlanePropertiesKHR(PhysicalDevice physicalDevice, uint32_t* pPropertyCount, DisplayPlanePropertiesKHR* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceDisplayPlanePropertiesKHR, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pPropertyCount), (VkDisplayPlanePropertiesKHR*)(pProperties))); }
inline Result getDisplayPlaneSupportedDisplaysKHR(PhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, DisplayKHR* pDisplays, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDisplayPlaneSupportedDisplaysKHR, (VkPhysicalDevice)(physicalDevice), planeIndex, (uint32_t*)(pDisplayCount), (VkDisplayKHR*)(pDisplays))); }
inline Result getDisplayModePropertiesKHR(PhysicalDevice physicalDevice, DisplayKHR display, uint32_t* pPropertyCount, DisplayModePropertiesKHR* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDisplayModePropertiesKHR, (VkPhysicalDevice)(physicalDevice), (VkDisplayKHR)(display), (uint32_t*)(pPropertyCount), (VkDisplayModePropertiesKHR*)(pProperties))); }
inline Result createDisplayModeKHR(PhysicalDevice physicalDevice, DisplayKHR display, const DisplayModeCreateInfoKHR* pCreateInfo, const AllocationCallbacks* pAllocator, DisplayModeKHR* pMode, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateDisplayModeKHR, (VkPhysicalDevice)(physicalDevice), (VkDisplayKHR)(display), (const VkDisplayModeCreateInfoKHR*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDisplayModeKHR*)(pMode))); }
inline Result getDisplayPlaneCapabilitiesKHR(PhysicalDevice physicalDevice, DisplayModeKHR mode, uint32_t planeIndex, DisplayPlaneCapabilitiesKHR* pCapabilities, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDisplayPlaneCapabilitiesKHR, (VkPhysicalDevice)(physicalDevice), (VkDisplayModeKHR)(mode), planeIndex, (VkDisplayPlaneCapabilitiesKHR*)(pCapabilities))); }
inline Result createDisplayPlaneSurfaceKHR(Instance instance, const DisplaySurfaceCreateInfoKHR* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateDisplayPlaneSurfaceKHR, (VkInstance)(instance), (const VkDisplaySurfaceCreateInfoKHR*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
inline Result createSharedSwapchainsKHR(Device device, uint32_t swapchainCount, const SwapchainCreateInfoKHR* pCreateInfos, const AllocationCallbacks* pAllocator, SwapchainKHR* pSwapchains, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateSharedSwapchainsKHR, (VkDevice)(device), swapchainCount, (const VkSwapchainCreateInfoKHR*)(pCreateInfos), (const VkAllocationCallbacks*)(pAllocator), (VkSwapchainKHR*)(pSwapchains))); }

#ifdef VK_USE_PLATFORM_XLIB_KHR
inline Result createXlibSurfaceKHR(Instance instance, const XlibSurfaceCreateInfoKHR* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateXlibSurfaceKHR, (VkInstance)(instance), (const VkXlibSurfaceCreateInfoKHR*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
inline Bool32 getPhysicalDeviceXlibPresentationSupportKHR(PhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID, DynamicDispatch* dispatcher = {}){ return (Bool32)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceXlibPresentationSupportKHR, (VkPhysicalDevice)(physicalDevice), queueFamilyIndex, (Display*)(dpy), visualID)); }
#endif //VK_USE_PLATFORM_XLIB_KHR


#ifdef VK_USE_PLATFORM_XCB_KHR
inline Result createXcbSurfaceKHR(Instance instance, const XcbSurfaceCreateInfoKHR* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateXcbSurfaceKHR, (VkInstance)(instance), (const VkXcbSurfaceCreateInfoKHR*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
inline Bool32 getPhysicalDeviceXcbPresentationSupportKHR(PhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id, DynamicDispatch* dispatcher = {}){ return (Bool32)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceXcbPresentationSupportKHR, (VkPhysicalDevice)(physicalDevice), queueFamilyIndex, (xcb_connection_t*)(connection), visual_id)); }
#endif //VK_USE_PLATFORM_XCB_KHR


#ifdef VK_USE_PLATFORM_WAYLAND_KHR
inline Result createWaylandSurfaceKHR(Instance instance, const WaylandSurfaceCreateInfoKHR* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateWaylandSurfaceKHR, (VkInstance)(instance), (const VkWaylandSurfaceCreateInfoKHR*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
inline Bool32 getPhysicalDeviceWaylandPresentationSupportKHR(PhysicalDevice physicalDevice, uint32_t queueFamilyIndex, wl_display* display, DynamicDispatch* dispatcher = {}){ return (Bool32)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceWaylandPresentationSupportKHR, (VkPhysicalDevice)(physicalDevice), queueFamilyIndex, (wl_display*)(display))); }
#endif //VK_USE_PLATFORM_WAYLAND_KHR


#ifdef VK_USE_PLATFORM_WIN32_KHR
inline Result createWin32SurfaceKHR(Instance instance, const Win32SurfaceCreateInfoKHR* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateWin32SurfaceKHR, (VkInstance)(instance), (const VkWin32SurfaceCreateInfoKHR*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
inline Bool32 getPhysicalDeviceWin32PresentationSupportKHR(PhysicalDevice physicalDevice, uint32_t queueFamilyIndex, DynamicDispatch* dispatcher = {}){ return (Bool32)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceWin32PresentationSupportKHR, (VkPhysicalDevice)(physicalDevice), queueFamilyIndex)); }
#endif //VK_USE_PLATFORM_WIN32_KHR

inline Result createDebugReportCallbackEXT(Instance instance, const DebugReportCallbackCreateInfoEXT* pCreateInfo, const AllocationCallbacks* pAllocator, DebugReportCallbackEXT* pCallback, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateDebugReportCallbackEXT, (VkInstance)(instance), (const VkDebugReportCallbackCreateInfoEXT*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDebugReportCallbackEXT*)(pCallback))); }
inline void destroyDebugReportCallbackEXT(Instance instance, DebugReportCallbackEXT callback, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyDebugReportCallbackEXT, (VkInstance)(instance), (VkDebugReportCallbackEXT)(callback), (const VkAllocationCallbacks*)(pAllocator))); }
inline void debugReportMessageEXT(Instance instance, DebugReportFlagsEXT flags, DebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDebugReportMessageEXT, (VkInstance)(instance), (VkDebugReportFlagsEXT)(flags), (VkDebugReportObjectTypeEXT)(objectType), object, location, messageCode, (const char*)(pLayerPrefix), (const char*)(pMessage))); }
inline Result debugMarkerSetObjectTagEXT(Device device, const DebugMarkerObjectTagInfoEXT* pTagInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDebugMarkerSetObjectTagEXT, (VkDevice)(device), (const VkDebugMarkerObjectTagInfoEXT*)(pTagInfo))); }
inline Result debugMarkerSetObjectNameEXT(Device device, const DebugMarkerObjectNameInfoEXT* pNameInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDebugMarkerSetObjectNameEXT, (VkDevice)(device), (const VkDebugMarkerObjectNameInfoEXT*)(pNameInfo))); }
inline void cmdDebugMarkerBeginEXT(CommandBuffer commandBuffer, const DebugMarkerMarkerInfoEXT* pMarkerInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDebugMarkerBeginEXT, (VkCommandBuffer)(commandBuffer), (const VkDebugMarkerMarkerInfoEXT*)(pMarkerInfo))); }
inline void cmdDebugMarkerEndEXT(CommandBuffer commandBuffer, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDebugMarkerEndEXT, (VkCommandBuffer)(commandBuffer))); }
inline void cmdDebugMarkerInsertEXT(CommandBuffer commandBuffer, const DebugMarkerMarkerInfoEXT* pMarkerInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDebugMarkerInsertEXT, (VkCommandBuffer)(commandBuffer), (const VkDebugMarkerMarkerInfoEXT*)(pMarkerInfo))); }
inline void cmdBindTransformFeedbackBuffersEXT(CommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const Buffer* pBuffers, const DeviceSize* pOffsets, const DeviceSize* pSizes, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBindTransformFeedbackBuffersEXT, (VkCommandBuffer)(commandBuffer), firstBinding, bindingCount, (const VkBuffer*)(pBuffers), (const VkDeviceSize*)(pOffsets), (const VkDeviceSize*)(pSizes))); }
inline void cmdBeginTransformFeedbackEXT(CommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const Buffer* pCounterBuffers, const DeviceSize* pCounterBufferOffsets, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBeginTransformFeedbackEXT, (VkCommandBuffer)(commandBuffer), firstCounterBuffer, counterBufferCount, (const VkBuffer*)(pCounterBuffers), (const VkDeviceSize*)(pCounterBufferOffsets))); }
inline void cmdEndTransformFeedbackEXT(CommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const Buffer* pCounterBuffers, const DeviceSize* pCounterBufferOffsets, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdEndTransformFeedbackEXT, (VkCommandBuffer)(commandBuffer), firstCounterBuffer, counterBufferCount, (const VkBuffer*)(pCounterBuffers), (const VkDeviceSize*)(pCounterBufferOffsets))); }
inline void cmdBeginQueryIndexedEXT(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t query, QueryControlFlags flags, uint32_t index, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBeginQueryIndexedEXT, (VkCommandBuffer)(commandBuffer), (VkQueryPool)(queryPool), query, (VkQueryControlFlags)(flags), index)); }
inline void cmdEndQueryIndexedEXT(CommandBuffer commandBuffer, QueryPool queryPool, uint32_t query, uint32_t index, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdEndQueryIndexedEXT, (VkCommandBuffer)(commandBuffer), (VkQueryPool)(queryPool), query, index)); }
inline void cmdDrawIndirectByteCountEXT(CommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, Buffer counterBuffer, DeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawIndirectByteCountEXT, (VkCommandBuffer)(commandBuffer), instanceCount, firstInstance, (VkBuffer)(counterBuffer), counterBufferOffset, counterOffset, vertexStride)); }
inline Result getShaderInfoAMD(Device device, Pipeline pipeline, ShaderStageBits shaderStage, ShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetShaderInfoAMD, (VkDevice)(device), (VkPipeline)(pipeline), (VkShaderStageFlagBits)(shaderStage), (VkShaderInfoTypeAMD)(infoType), (size_t*)(pInfoSize), (void*)(pInfo))); }

#ifdef VK_USE_PLATFORM_GGP
inline Result createStreamDescriptorSurfaceGGP(Instance instance, const StreamDescriptorSurfaceCreateInfoGGP* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateStreamDescriptorSurfaceGGP, (VkInstance)(instance), (const VkStreamDescriptorSurfaceCreateInfoGGP*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
#endif //VK_USE_PLATFORM_GGP

inline Result getPhysicalDeviceExternalImageFormatPropertiesNV(PhysicalDevice physicalDevice, Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags, ExternalMemoryHandleTypeFlagsNV externalHandleType, ExternalImageFormatPropertiesNV* pExternalImageFormatProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceExternalImageFormatPropertiesNV, (VkPhysicalDevice)(physicalDevice), (VkFormat)(format), (VkImageType)(type), (VkImageTiling)(tiling), (VkImageUsageFlags)(usage), (VkImageCreateFlags)(flags), (VkExternalMemoryHandleTypeFlagsNV)(externalHandleType), (VkExternalImageFormatPropertiesNV*)(pExternalImageFormatProperties))); }

#ifdef VK_USE_PLATFORM_WIN32_KHR
inline Result getMemoryWin32HandleNV(Device device, DeviceMemory memory, ExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetMemoryWin32HandleNV, (VkDevice)(device), (VkDeviceMemory)(memory), (VkExternalMemoryHandleTypeFlagsNV)(handleType), (HANDLE*)(pHandle))); }
#endif //VK_USE_PLATFORM_WIN32_KHR


#ifdef VK_USE_PLATFORM_VI_NN
inline Result createViSurfaceNN(Instance instance, const ViSurfaceCreateInfoNN* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateViSurfaceNN, (VkInstance)(instance), (const VkViSurfaceCreateInfoNN*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
#endif //VK_USE_PLATFORM_VI_NN


#ifdef VK_USE_PLATFORM_WIN32_KHR
inline Result getMemoryWin32HandleKHR(Device device, const MemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetMemoryWin32HandleKHR, (VkDevice)(device), (const VkMemoryGetWin32HandleInfoKHR*)(pGetWin32HandleInfo), (HANDLE*)(pHandle))); }
inline Result getMemoryWin32HandlePropertiesKHR(Device device, ExternalMemoryHandleTypeBits handleType, HANDLE handle, MemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetMemoryWin32HandlePropertiesKHR, (VkDevice)(device), (VkExternalMemoryHandleTypeFlagBits)(handleType), handle, (VkMemoryWin32HandlePropertiesKHR*)(pMemoryWin32HandleProperties))); }
#endif //VK_USE_PLATFORM_WIN32_KHR

inline Result getMemoryFdKHR(Device device, const MemoryGetFdInfoKHR* pGetFdInfo, int* pFd, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetMemoryFdKHR, (VkDevice)(device), (const VkMemoryGetFdInfoKHR*)(pGetFdInfo), (int*)(pFd))); }
inline Result getMemoryFdPropertiesKHR(Device device, ExternalMemoryHandleTypeBits handleType, int fd, MemoryFdPropertiesKHR* pMemoryFdProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetMemoryFdPropertiesKHR, (VkDevice)(device), (VkExternalMemoryHandleTypeFlagBits)(handleType), fd, (VkMemoryFdPropertiesKHR*)(pMemoryFdProperties))); }

#ifdef VK_USE_PLATFORM_WIN32_KHR
inline Result importSemaphoreWin32HandleKHR(Device device, const ImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkImportSemaphoreWin32HandleKHR, (VkDevice)(device), (const VkImportSemaphoreWin32HandleInfoKHR*)(pImportSemaphoreWin32HandleInfo))); }
inline Result getSemaphoreWin32HandleKHR(Device device, const SemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetSemaphoreWin32HandleKHR, (VkDevice)(device), (const VkSemaphoreGetWin32HandleInfoKHR*)(pGetWin32HandleInfo), (HANDLE*)(pHandle))); }
#endif //VK_USE_PLATFORM_WIN32_KHR

inline Result importSemaphoreFdKHR(Device device, const ImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkImportSemaphoreFdKHR, (VkDevice)(device), (const VkImportSemaphoreFdInfoKHR*)(pImportSemaphoreFdInfo))); }
inline Result getSemaphoreFdKHR(Device device, const SemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetSemaphoreFdKHR, (VkDevice)(device), (const VkSemaphoreGetFdInfoKHR*)(pGetFdInfo), (int*)(pFd))); }
inline void cmdPushDescriptorSetKHR(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const WriteDescriptorSet* pDescriptorWrites, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdPushDescriptorSetKHR, (VkCommandBuffer)(commandBuffer), (VkPipelineBindPoint)(pipelineBindPoint), (VkPipelineLayout)(layout), set, descriptorWriteCount, (const VkWriteDescriptorSet*)(pDescriptorWrites))); }
inline void cmdPushDescriptorSetWithTemplateKHR(CommandBuffer commandBuffer, DescriptorUpdateTemplate descriptorUpdateTemplate, PipelineLayout layout, uint32_t set, const void* pData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdPushDescriptorSetWithTemplateKHR, (VkCommandBuffer)(commandBuffer), (VkDescriptorUpdateTemplate)(descriptorUpdateTemplate), (VkPipelineLayout)(layout), set, (const void*)(pData))); }
inline void cmdBeginConditionalRenderingEXT(CommandBuffer commandBuffer, const ConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBeginConditionalRenderingEXT, (VkCommandBuffer)(commandBuffer), (const VkConditionalRenderingBeginInfoEXT*)(pConditionalRenderingBegin))); }
inline void cmdEndConditionalRenderingEXT(CommandBuffer commandBuffer, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdEndConditionalRenderingEXT, (VkCommandBuffer)(commandBuffer))); }
inline void cmdSetViewportWScalingNV(CommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const ViewportWScalingNV* pViewportWScalings, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetViewportWScalingNV, (VkCommandBuffer)(commandBuffer), firstViewport, viewportCount, (const VkViewportWScalingNV*)(pViewportWScalings))); }
inline Result releaseDisplayEXT(PhysicalDevice physicalDevice, DisplayKHR display, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkReleaseDisplayEXT, (VkPhysicalDevice)(physicalDevice), (VkDisplayKHR)(display))); }

#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
inline Result acquireXlibDisplayEXT(PhysicalDevice physicalDevice, Display* dpy, DisplayKHR display, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkAcquireXlibDisplayEXT, (VkPhysicalDevice)(physicalDevice), (Display*)(dpy), (VkDisplayKHR)(display))); }
inline Result getRandROutputDisplayEXT(PhysicalDevice physicalDevice, Display* dpy, RROutput rrOutput, DisplayKHR* pDisplay, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetRandROutputDisplayEXT, (VkPhysicalDevice)(physicalDevice), (Display*)(dpy), rrOutput, (VkDisplayKHR*)(pDisplay))); }
#endif //VK_USE_PLATFORM_XLIB_XRANDR_EXT

inline Result getPhysicalDeviceSurfaceCapabilities2EXT(PhysicalDevice physicalDevice, SurfaceKHR surface, SurfaceCapabilities2EXT* pSurfaceCapabilities, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSurfaceCapabilities2EXT, (VkPhysicalDevice)(physicalDevice), (VkSurfaceKHR)(surface), (VkSurfaceCapabilities2EXT*)(pSurfaceCapabilities))); }
inline Result displayPowerControlEXT(Device device, DisplayKHR display, const DisplayPowerInfoEXT* pDisplayPowerInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDisplayPowerControlEXT, (VkDevice)(device), (VkDisplayKHR)(display), (const VkDisplayPowerInfoEXT*)(pDisplayPowerInfo))); }
inline Result registerDeviceEventEXT(Device device, const DeviceEventInfoEXT* pDeviceEventInfo, const AllocationCallbacks* pAllocator, Fence* pFence, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkRegisterDeviceEventEXT, (VkDevice)(device), (const VkDeviceEventInfoEXT*)(pDeviceEventInfo), (const VkAllocationCallbacks*)(pAllocator), (VkFence*)(pFence))); }
inline Result registerDisplayEventEXT(Device device, DisplayKHR display, const DisplayEventInfoEXT* pDisplayEventInfo, const AllocationCallbacks* pAllocator, Fence* pFence, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkRegisterDisplayEventEXT, (VkDevice)(device), (VkDisplayKHR)(display), (const VkDisplayEventInfoEXT*)(pDisplayEventInfo), (const VkAllocationCallbacks*)(pAllocator), (VkFence*)(pFence))); }
inline Result getSwapchainCounterEXT(Device device, SwapchainKHR swapchain, SurfaceCounterBitsEXT counter, uint64_t* pCounterValue, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetSwapchainCounterEXT, (VkDevice)(device), (VkSwapchainKHR)(swapchain), (VkSurfaceCounterFlagBitsEXT)(counter), (uint64_t*)(pCounterValue))); }
inline Result getRefreshCycleDurationGOOGLE(Device device, SwapchainKHR swapchain, RefreshCycleDurationGOOGLE* pDisplayTimingProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetRefreshCycleDurationGOOGLE, (VkDevice)(device), (VkSwapchainKHR)(swapchain), (VkRefreshCycleDurationGOOGLE*)(pDisplayTimingProperties))); }
inline Result getPastPresentationTimingGOOGLE(Device device, SwapchainKHR swapchain, uint32_t* pPresentationTimingCount, PastPresentationTimingGOOGLE* pPresentationTimings, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPastPresentationTimingGOOGLE, (VkDevice)(device), (VkSwapchainKHR)(swapchain), (uint32_t*)(pPresentationTimingCount), (VkPastPresentationTimingGOOGLE*)(pPresentationTimings))); }
inline void cmdSetDiscardRectangleEXT(CommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const Rect2D* pDiscardRectangles, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetDiscardRectangleEXT, (VkCommandBuffer)(commandBuffer), firstDiscardRectangle, discardRectangleCount, (const VkRect2D*)(pDiscardRectangles))); }
inline void setHdrMetadataEXT(Device device, uint32_t swapchainCount, const SwapchainKHR* pSwapchains, const HdrMetadataEXT* pMetadata, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetHdrMetadataEXT, (VkDevice)(device), swapchainCount, (const VkSwapchainKHR*)(pSwapchains), (const VkHdrMetadataEXT*)(pMetadata))); }
inline Result getSwapchainStatusKHR(Device device, SwapchainKHR swapchain, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetSwapchainStatusKHR, (VkDevice)(device), (VkSwapchainKHR)(swapchain))); }

#ifdef VK_USE_PLATFORM_WIN32_KHR
inline Result importFenceWin32HandleKHR(Device device, const ImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkImportFenceWin32HandleKHR, (VkDevice)(device), (const VkImportFenceWin32HandleInfoKHR*)(pImportFenceWin32HandleInfo))); }
inline Result getFenceWin32HandleKHR(Device device, const FenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetFenceWin32HandleKHR, (VkDevice)(device), (const VkFenceGetWin32HandleInfoKHR*)(pGetWin32HandleInfo), (HANDLE*)(pHandle))); }
#endif //VK_USE_PLATFORM_WIN32_KHR

inline Result importFenceFdKHR(Device device, const ImportFenceFdInfoKHR* pImportFenceFdInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkImportFenceFdKHR, (VkDevice)(device), (const VkImportFenceFdInfoKHR*)(pImportFenceFdInfo))); }
inline Result getFenceFdKHR(Device device, const FenceGetFdInfoKHR* pGetFdInfo, int* pFd, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetFenceFdKHR, (VkDevice)(device), (const VkFenceGetFdInfoKHR*)(pGetFdInfo), (int*)(pFd))); }
inline Result enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(PhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, PerformanceCounterKHR* pCounters, PerformanceCounterDescriptionKHR* pCounterDescriptions, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR, (VkPhysicalDevice)(physicalDevice), queueFamilyIndex, (uint32_t*)(pCounterCount), (VkPerformanceCounterKHR*)(pCounters), (VkPerformanceCounterDescriptionKHR*)(pCounterDescriptions))); }
inline void getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(PhysicalDevice physicalDevice, const QueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR, (VkPhysicalDevice)(physicalDevice), (const VkQueryPoolPerformanceCreateInfoKHR*)(pPerformanceQueryCreateInfo), (uint32_t*)(pNumPasses))); }
inline Result acquireProfilingLockKHR(Device device, const AcquireProfilingLockInfoKHR* pInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkAcquireProfilingLockKHR, (VkDevice)(device), (const VkAcquireProfilingLockInfoKHR*)(pInfo))); }
inline void releaseProfilingLockKHR(Device device, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkReleaseProfilingLockKHR, (VkDevice)(device))); }
inline Result getPhysicalDeviceSurfaceCapabilities2KHR(PhysicalDevice physicalDevice, const PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, SurfaceCapabilities2KHR* pSurfaceCapabilities, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSurfaceCapabilities2KHR, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceSurfaceInfo2KHR*)(pSurfaceInfo), (VkSurfaceCapabilities2KHR*)(pSurfaceCapabilities))); }
inline Result getPhysicalDeviceSurfaceFormats2KHR(PhysicalDevice physicalDevice, const PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, SurfaceFormat2KHR* pSurfaceFormats, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSurfaceFormats2KHR, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceSurfaceInfo2KHR*)(pSurfaceInfo), (uint32_t*)(pSurfaceFormatCount), (VkSurfaceFormat2KHR*)(pSurfaceFormats))); }
inline Result getPhysicalDeviceDisplayProperties2KHR(PhysicalDevice physicalDevice, uint32_t* pPropertyCount, DisplayProperties2KHR* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceDisplayProperties2KHR, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pPropertyCount), (VkDisplayProperties2KHR*)(pProperties))); }
inline Result getPhysicalDeviceDisplayPlaneProperties2KHR(PhysicalDevice physicalDevice, uint32_t* pPropertyCount, DisplayPlaneProperties2KHR* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceDisplayPlaneProperties2KHR, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pPropertyCount), (VkDisplayPlaneProperties2KHR*)(pProperties))); }
inline Result getDisplayModeProperties2KHR(PhysicalDevice physicalDevice, DisplayKHR display, uint32_t* pPropertyCount, DisplayModeProperties2KHR* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDisplayModeProperties2KHR, (VkPhysicalDevice)(physicalDevice), (VkDisplayKHR)(display), (uint32_t*)(pPropertyCount), (VkDisplayModeProperties2KHR*)(pProperties))); }
inline Result getDisplayPlaneCapabilities2KHR(PhysicalDevice physicalDevice, const DisplayPlaneInfo2KHR* pDisplayPlaneInfo, DisplayPlaneCapabilities2KHR* pCapabilities, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDisplayPlaneCapabilities2KHR, (VkPhysicalDevice)(physicalDevice), (const VkDisplayPlaneInfo2KHR*)(pDisplayPlaneInfo), (VkDisplayPlaneCapabilities2KHR*)(pCapabilities))); }

#ifdef VK_USE_PLATFORM_IOS_MVK
inline Result createIOSSurfaceMVK(Instance instance, const IOSSurfaceCreateInfoMVK* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateIOSSurfaceMVK, (VkInstance)(instance), (const VkIOSSurfaceCreateInfoMVK*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
#endif //VK_USE_PLATFORM_IOS_MVK


#ifdef VK_USE_PLATFORM_MACOS_MVK
inline Result createMacOSSurfaceMVK(Instance instance, const MacOSSurfaceCreateInfoMVK* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateMacOSSurfaceMVK, (VkInstance)(instance), (const VkMacOSSurfaceCreateInfoMVK*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
#endif //VK_USE_PLATFORM_MACOS_MVK

inline Result setDebugUtilsObjectNameEXT(Device device, const DebugUtilsObjectNameInfoEXT* pNameInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetDebugUtilsObjectNameEXT, (VkDevice)(device), (const VkDebugUtilsObjectNameInfoEXT*)(pNameInfo))); }
inline Result setDebugUtilsObjectTagEXT(Device device, const DebugUtilsObjectTagInfoEXT* pTagInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetDebugUtilsObjectTagEXT, (VkDevice)(device), (const VkDebugUtilsObjectTagInfoEXT*)(pTagInfo))); }
inline void queueBeginDebugUtilsLabelEXT(Queue queue, const DebugUtilsLabelEXT* pLabelInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkQueueBeginDebugUtilsLabelEXT, (VkQueue)(queue), (const VkDebugUtilsLabelEXT*)(pLabelInfo))); }
inline void queueEndDebugUtilsLabelEXT(Queue queue, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkQueueEndDebugUtilsLabelEXT, (VkQueue)(queue))); }
inline void queueInsertDebugUtilsLabelEXT(Queue queue, const DebugUtilsLabelEXT* pLabelInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkQueueInsertDebugUtilsLabelEXT, (VkQueue)(queue), (const VkDebugUtilsLabelEXT*)(pLabelInfo))); }
inline void cmdBeginDebugUtilsLabelEXT(CommandBuffer commandBuffer, const DebugUtilsLabelEXT* pLabelInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBeginDebugUtilsLabelEXT, (VkCommandBuffer)(commandBuffer), (const VkDebugUtilsLabelEXT*)(pLabelInfo))); }
inline void cmdEndDebugUtilsLabelEXT(CommandBuffer commandBuffer, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdEndDebugUtilsLabelEXT, (VkCommandBuffer)(commandBuffer))); }
inline void cmdInsertDebugUtilsLabelEXT(CommandBuffer commandBuffer, const DebugUtilsLabelEXT* pLabelInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdInsertDebugUtilsLabelEXT, (VkCommandBuffer)(commandBuffer), (const VkDebugUtilsLabelEXT*)(pLabelInfo))); }
inline Result createDebugUtilsMessengerEXT(Instance instance, const DebugUtilsMessengerCreateInfoEXT* pCreateInfo, const AllocationCallbacks* pAllocator, DebugUtilsMessengerEXT* pMessenger, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateDebugUtilsMessengerEXT, (VkInstance)(instance), (const VkDebugUtilsMessengerCreateInfoEXT*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkDebugUtilsMessengerEXT*)(pMessenger))); }
inline void destroyDebugUtilsMessengerEXT(Instance instance, DebugUtilsMessengerEXT messenger, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyDebugUtilsMessengerEXT, (VkInstance)(instance), (VkDebugUtilsMessengerEXT)(messenger), (const VkAllocationCallbacks*)(pAllocator))); }
inline void submitDebugUtilsMessageEXT(Instance instance, DebugUtilsMessageSeverityBitsEXT messageSeverity, DebugUtilsMessageTypeFlagsEXT messageTypes, const DebugUtilsMessengerCallbackDataEXT* pCallbackData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSubmitDebugUtilsMessageEXT, (VkInstance)(instance), (VkDebugUtilsMessageSeverityFlagBitsEXT)(messageSeverity), (VkDebugUtilsMessageTypeFlagsEXT)(messageTypes), (const VkDebugUtilsMessengerCallbackDataEXT*)(pCallbackData))); }
inline void cmdSetSampleLocationsEXT(CommandBuffer commandBuffer, const SampleLocationsInfoEXT* pSampleLocationsInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetSampleLocationsEXT, (VkCommandBuffer)(commandBuffer), (const VkSampleLocationsInfoEXT*)(pSampleLocationsInfo))); }
inline void getPhysicalDeviceMultisamplePropertiesEXT(PhysicalDevice physicalDevice, SampleCountBits samples, MultisamplePropertiesEXT* pMultisampleProperties, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceMultisamplePropertiesEXT, (VkPhysicalDevice)(physicalDevice), (VkSampleCountFlagBits)(samples), (VkMultisamplePropertiesEXT*)(pMultisampleProperties))); }
inline Result createAccelerationStructureKHR(Device device, const AccelerationStructureCreateInfoKHR* pCreateInfo, const AllocationCallbacks* pAllocator, AccelerationStructureKHR* pAccelerationStructure, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateAccelerationStructureKHR, (VkDevice)(device), (const VkAccelerationStructureCreateInfoKHR*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkAccelerationStructureKHR*)(pAccelerationStructure))); }
inline void destroyAccelerationStructureKHR(Device device, AccelerationStructureKHR accelerationStructure, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyAccelerationStructureKHR, (VkDevice)(device), (VkAccelerationStructureKHR)(accelerationStructure), (const VkAllocationCallbacks*)(pAllocator))); }
inline void cmdBuildAccelerationStructuresKHR(CommandBuffer commandBuffer, uint32_t infoCount, const AccelerationStructureBuildGeometryInfoKHR* pInfos, const AccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBuildAccelerationStructuresKHR, (VkCommandBuffer)(commandBuffer), infoCount, (const VkAccelerationStructureBuildGeometryInfoKHR*)(pInfos), (const VkAccelerationStructureBuildRangeInfoKHR* const*)(ppBuildRangeInfos))); }
inline void cmdBuildAccelerationStructuresIndirectKHR(CommandBuffer commandBuffer, uint32_t infoCount, const AccelerationStructureBuildGeometryInfoKHR* pInfos, const DeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t* const* ppMaxPrimitiveCounts, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBuildAccelerationStructuresIndirectKHR, (VkCommandBuffer)(commandBuffer), infoCount, (const VkAccelerationStructureBuildGeometryInfoKHR*)(pInfos), (const VkDeviceAddress*)(pIndirectDeviceAddresses), (const uint32_t*)(pIndirectStrides), (const uint32_t* const*)(ppMaxPrimitiveCounts))); }
inline Result buildAccelerationStructuresKHR(Device device, DeferredOperationKHR deferredOperation, uint32_t infoCount, const AccelerationStructureBuildGeometryInfoKHR* pInfos, const AccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkBuildAccelerationStructuresKHR, (VkDevice)(device), (VkDeferredOperationKHR)(deferredOperation), infoCount, (const VkAccelerationStructureBuildGeometryInfoKHR*)(pInfos), (const VkAccelerationStructureBuildRangeInfoKHR* const*)(ppBuildRangeInfos))); }
inline Result copyAccelerationStructureKHR(Device device, DeferredOperationKHR deferredOperation, const CopyAccelerationStructureInfoKHR* pInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCopyAccelerationStructureKHR, (VkDevice)(device), (VkDeferredOperationKHR)(deferredOperation), (const VkCopyAccelerationStructureInfoKHR*)(pInfo))); }
inline Result copyAccelerationStructureToMemoryKHR(Device device, DeferredOperationKHR deferredOperation, const CopyAccelerationStructureToMemoryInfoKHR* pInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCopyAccelerationStructureToMemoryKHR, (VkDevice)(device), (VkDeferredOperationKHR)(deferredOperation), (const VkCopyAccelerationStructureToMemoryInfoKHR*)(pInfo))); }
inline Result copyMemoryToAccelerationStructureKHR(Device device, DeferredOperationKHR deferredOperation, const CopyMemoryToAccelerationStructureInfoKHR* pInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCopyMemoryToAccelerationStructureKHR, (VkDevice)(device), (VkDeferredOperationKHR)(deferredOperation), (const VkCopyMemoryToAccelerationStructureInfoKHR*)(pInfo))); }
inline Result writeAccelerationStructuresPropertiesKHR(Device device, uint32_t accelerationStructureCount, const AccelerationStructureKHR* pAccelerationStructures, QueryType queryType, size_t dataSize, void* pData, size_t stride, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkWriteAccelerationStructuresPropertiesKHR, (VkDevice)(device), accelerationStructureCount, (const VkAccelerationStructureKHR*)(pAccelerationStructures), (VkQueryType)(queryType), dataSize, (void*)(pData), stride)); }
inline void cmdCopyAccelerationStructureKHR(CommandBuffer commandBuffer, const CopyAccelerationStructureInfoKHR* pInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyAccelerationStructureKHR, (VkCommandBuffer)(commandBuffer), (const VkCopyAccelerationStructureInfoKHR*)(pInfo))); }
inline void cmdCopyAccelerationStructureToMemoryKHR(CommandBuffer commandBuffer, const CopyAccelerationStructureToMemoryInfoKHR* pInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyAccelerationStructureToMemoryKHR, (VkCommandBuffer)(commandBuffer), (const VkCopyAccelerationStructureToMemoryInfoKHR*)(pInfo))); }
inline void cmdCopyMemoryToAccelerationStructureKHR(CommandBuffer commandBuffer, const CopyMemoryToAccelerationStructureInfoKHR* pInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyMemoryToAccelerationStructureKHR, (VkCommandBuffer)(commandBuffer), (const VkCopyMemoryToAccelerationStructureInfoKHR*)(pInfo))); }
inline DeviceAddress getAccelerationStructureDeviceAddressKHR(Device device, const AccelerationStructureDeviceAddressInfoKHR* pInfo, DynamicDispatch* dispatcher = {}){ return (DeviceAddress)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetAccelerationStructureDeviceAddressKHR, (VkDevice)(device), (const VkAccelerationStructureDeviceAddressInfoKHR*)(pInfo))); }
inline void cmdWriteAccelerationStructuresPropertiesKHR(CommandBuffer commandBuffer, uint32_t accelerationStructureCount, const AccelerationStructureKHR* pAccelerationStructures, QueryType queryType, QueryPool queryPool, uint32_t firstQuery, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdWriteAccelerationStructuresPropertiesKHR, (VkCommandBuffer)(commandBuffer), accelerationStructureCount, (const VkAccelerationStructureKHR*)(pAccelerationStructures), (VkQueryType)(queryType), (VkQueryPool)(queryPool), firstQuery)); }
inline void getDeviceAccelerationStructureCompatibilityKHR(Device device, const AccelerationStructureVersionInfoKHR* pVersionInfo, AccelerationStructureCompatibilityKHR* pCompatibility, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceAccelerationStructureCompatibilityKHR, (VkDevice)(device), (const VkAccelerationStructureVersionInfoKHR*)(pVersionInfo), (VkAccelerationStructureCompatibilityKHR*)(pCompatibility))); }
inline void getAccelerationStructureBuildSizesKHR(Device device, AccelerationStructureBuildTypeKHR buildType, const AccelerationStructureBuildGeometryInfoKHR* pBuildInfo, const uint32_t* pMaxPrimitiveCounts, AccelerationStructureBuildSizesInfoKHR* pSizeInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetAccelerationStructureBuildSizesKHR, (VkDevice)(device), (VkAccelerationStructureBuildTypeKHR)(buildType), (const VkAccelerationStructureBuildGeometryInfoKHR*)(pBuildInfo), (const uint32_t*)(pMaxPrimitiveCounts), (VkAccelerationStructureBuildSizesInfoKHR*)(pSizeInfo))); }
inline void cmdTraceRaysKHR(CommandBuffer commandBuffer, const StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const StridedDeviceAddressRegionKHR* pMissShaderBindingTable, const StridedDeviceAddressRegionKHR* pHitShaderBindingTable, const StridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdTraceRaysKHR, (VkCommandBuffer)(commandBuffer), (const VkStridedDeviceAddressRegionKHR*)(pRaygenShaderBindingTable), (const VkStridedDeviceAddressRegionKHR*)(pMissShaderBindingTable), (const VkStridedDeviceAddressRegionKHR*)(pHitShaderBindingTable), (const VkStridedDeviceAddressRegionKHR*)(pCallableShaderBindingTable), width, height, depth)); }
inline Result createRayTracingPipelinesKHR(Device device, DeferredOperationKHR deferredOperation, PipelineCache pipelineCache, uint32_t createInfoCount, const RayTracingPipelineCreateInfoKHR* pCreateInfos, const AllocationCallbacks* pAllocator, Pipeline* pPipelines, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateRayTracingPipelinesKHR, (VkDevice)(device), (VkDeferredOperationKHR)(deferredOperation), (VkPipelineCache)(pipelineCache), createInfoCount, (const VkRayTracingPipelineCreateInfoKHR*)(pCreateInfos), (const VkAllocationCallbacks*)(pAllocator), (VkPipeline*)(pPipelines))); }
inline Result getRayTracingShaderGroupHandlesKHR(Device device, Pipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetRayTracingShaderGroupHandlesKHR, (VkDevice)(device), (VkPipeline)(pipeline), firstGroup, groupCount, dataSize, (void*)(pData))); }
inline Result getRayTracingShaderGroupHandlesNV(Device device, Pipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetRayTracingShaderGroupHandlesKHR, (VkDevice)(device), (VkPipeline)(pipeline), firstGroup, groupCount, dataSize, (void*)(pData))); }
inline Result getRayTracingCaptureReplayShaderGroupHandlesKHR(Device device, Pipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetRayTracingCaptureReplayShaderGroupHandlesKHR, (VkDevice)(device), (VkPipeline)(pipeline), firstGroup, groupCount, dataSize, (void*)(pData))); }
inline void cmdTraceRaysIndirectKHR(CommandBuffer commandBuffer, const StridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const StridedDeviceAddressRegionKHR* pMissShaderBindingTable, const StridedDeviceAddressRegionKHR* pHitShaderBindingTable, const StridedDeviceAddressRegionKHR* pCallableShaderBindingTable, DeviceAddress indirectDeviceAddress, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdTraceRaysIndirectKHR, (VkCommandBuffer)(commandBuffer), (const VkStridedDeviceAddressRegionKHR*)(pRaygenShaderBindingTable), (const VkStridedDeviceAddressRegionKHR*)(pMissShaderBindingTable), (const VkStridedDeviceAddressRegionKHR*)(pHitShaderBindingTable), (const VkStridedDeviceAddressRegionKHR*)(pCallableShaderBindingTable), indirectDeviceAddress)); }
inline DeviceSize getRayTracingShaderGroupStackSizeKHR(Device device, Pipeline pipeline, uint32_t group, ShaderGroupShaderKHR groupShader, DynamicDispatch* dispatcher = {}){ return (DeviceSize)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetRayTracingShaderGroupStackSizeKHR, (VkDevice)(device), (VkPipeline)(pipeline), group, (VkShaderGroupShaderKHR)(groupShader))); }
inline void cmdSetRayTracingPipelineStackSizeKHR(CommandBuffer commandBuffer, uint32_t pipelineStackSize, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetRayTracingPipelineStackSizeKHR, (VkCommandBuffer)(commandBuffer), pipelineStackSize)); }
inline Result getImageDrmFormatModifierPropertiesEXT(Device device, Image image, ImageDrmFormatModifierPropertiesEXT* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetImageDrmFormatModifierPropertiesEXT, (VkDevice)(device), (VkImage)(image), (VkImageDrmFormatModifierPropertiesEXT*)(pProperties))); }
inline Result createValidationCacheEXT(Device device, const ValidationCacheCreateInfoEXT* pCreateInfo, const AllocationCallbacks* pAllocator, ValidationCacheEXT* pValidationCache, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateValidationCacheEXT, (VkDevice)(device), (const VkValidationCacheCreateInfoEXT*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkValidationCacheEXT*)(pValidationCache))); }
inline void destroyValidationCacheEXT(Device device, ValidationCacheEXT validationCache, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyValidationCacheEXT, (VkDevice)(device), (VkValidationCacheEXT)(validationCache), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result mergeValidationCachesEXT(Device device, ValidationCacheEXT dstCache, uint32_t srcCacheCount, const ValidationCacheEXT* pSrcCaches, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkMergeValidationCachesEXT, (VkDevice)(device), (VkValidationCacheEXT)(dstCache), srcCacheCount, (const VkValidationCacheEXT*)(pSrcCaches))); }
inline Result getValidationCacheDataEXT(Device device, ValidationCacheEXT validationCache, size_t* pDataSize, void* pData, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetValidationCacheDataEXT, (VkDevice)(device), (VkValidationCacheEXT)(validationCache), (size_t*)(pDataSize), (void*)(pData))); }
inline void cmdBindShadingRateImageNV(CommandBuffer commandBuffer, ImageView imageView, ImageLayout imageLayout, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBindShadingRateImageNV, (VkCommandBuffer)(commandBuffer), (VkImageView)(imageView), (VkImageLayout)(imageLayout))); }
inline void cmdSetViewportShadingRatePaletteNV(CommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const ShadingRatePaletteNV* pShadingRatePalettes, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetViewportShadingRatePaletteNV, (VkCommandBuffer)(commandBuffer), firstViewport, viewportCount, (const VkShadingRatePaletteNV*)(pShadingRatePalettes))); }
inline void cmdSetCoarseSampleOrderNV(CommandBuffer commandBuffer, CoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const CoarseSampleOrderCustomNV* pCustomSampleOrders, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetCoarseSampleOrderNV, (VkCommandBuffer)(commandBuffer), (VkCoarseSampleOrderTypeNV)(sampleOrderType), customSampleOrderCount, (const VkCoarseSampleOrderCustomNV*)(pCustomSampleOrders))); }
inline Result createAccelerationStructureNV(Device device, const AccelerationStructureCreateInfoNV* pCreateInfo, const AllocationCallbacks* pAllocator, AccelerationStructureNV* pAccelerationStructure, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateAccelerationStructureNV, (VkDevice)(device), (const VkAccelerationStructureCreateInfoNV*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkAccelerationStructureNV*)(pAccelerationStructure))); }
inline void destroyAccelerationStructureNV(Device device, AccelerationStructureNV accelerationStructure, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyAccelerationStructureNV, (VkDevice)(device), (VkAccelerationStructureNV)(accelerationStructure), (const VkAllocationCallbacks*)(pAllocator))); }
inline void getAccelerationStructureMemoryRequirementsNV(Device device, const AccelerationStructureMemoryRequirementsInfoNV* pInfo, MemoryRequirements2KHR* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetAccelerationStructureMemoryRequirementsNV, (VkDevice)(device), (const VkAccelerationStructureMemoryRequirementsInfoNV*)(pInfo), (VkMemoryRequirements2KHR*)(pMemoryRequirements))); }
inline Result bindAccelerationStructureMemoryNV(Device device, uint32_t bindInfoCount, const BindAccelerationStructureMemoryInfoNV* pBindInfos, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkBindAccelerationStructureMemoryNV, (VkDevice)(device), bindInfoCount, (const VkBindAccelerationStructureMemoryInfoNV*)(pBindInfos))); }
inline void cmdBuildAccelerationStructureNV(CommandBuffer commandBuffer, const AccelerationStructureInfoNV* pInfo, Buffer instanceData, DeviceSize instanceOffset, Bool32 update, AccelerationStructureNV dst, AccelerationStructureNV src, Buffer scratch, DeviceSize scratchOffset, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBuildAccelerationStructureNV, (VkCommandBuffer)(commandBuffer), (const VkAccelerationStructureInfoNV*)(pInfo), (VkBuffer)(instanceData), instanceOffset, update, (VkAccelerationStructureNV)(dst), (VkAccelerationStructureNV)(src), (VkBuffer)(scratch), scratchOffset)); }
inline void cmdCopyAccelerationStructureNV(CommandBuffer commandBuffer, AccelerationStructureNV dst, AccelerationStructureNV src, CopyAccelerationStructureModeKHR mode, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdCopyAccelerationStructureNV, (VkCommandBuffer)(commandBuffer), (VkAccelerationStructureNV)(dst), (VkAccelerationStructureNV)(src), (VkCopyAccelerationStructureModeKHR)(mode))); }
inline void cmdTraceRaysNV(CommandBuffer commandBuffer, Buffer raygenShaderBindingTableBuffer, DeviceSize raygenShaderBindingOffset, Buffer missShaderBindingTableBuffer, DeviceSize missShaderBindingOffset, DeviceSize missShaderBindingStride, Buffer hitShaderBindingTableBuffer, DeviceSize hitShaderBindingOffset, DeviceSize hitShaderBindingStride, Buffer callableShaderBindingTableBuffer, DeviceSize callableShaderBindingOffset, DeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdTraceRaysNV, (VkCommandBuffer)(commandBuffer), (VkBuffer)(raygenShaderBindingTableBuffer), raygenShaderBindingOffset, (VkBuffer)(missShaderBindingTableBuffer), missShaderBindingOffset, missShaderBindingStride, (VkBuffer)(hitShaderBindingTableBuffer), hitShaderBindingOffset, hitShaderBindingStride, (VkBuffer)(callableShaderBindingTableBuffer), callableShaderBindingOffset, callableShaderBindingStride, width, height, depth)); }
inline Result createRayTracingPipelinesNV(Device device, PipelineCache pipelineCache, uint32_t createInfoCount, const RayTracingPipelineCreateInfoNV* pCreateInfos, const AllocationCallbacks* pAllocator, Pipeline* pPipelines, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateRayTracingPipelinesNV, (VkDevice)(device), (VkPipelineCache)(pipelineCache), createInfoCount, (const VkRayTracingPipelineCreateInfoNV*)(pCreateInfos), (const VkAllocationCallbacks*)(pAllocator), (VkPipeline*)(pPipelines))); }
inline Result getAccelerationStructureHandleNV(Device device, AccelerationStructureNV accelerationStructure, size_t dataSize, void* pData, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetAccelerationStructureHandleNV, (VkDevice)(device), (VkAccelerationStructureNV)(accelerationStructure), dataSize, (void*)(pData))); }
inline void cmdWriteAccelerationStructuresPropertiesNV(CommandBuffer commandBuffer, uint32_t accelerationStructureCount, const AccelerationStructureNV* pAccelerationStructures, QueryType queryType, QueryPool queryPool, uint32_t firstQuery, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdWriteAccelerationStructuresPropertiesNV, (VkCommandBuffer)(commandBuffer), accelerationStructureCount, (const VkAccelerationStructureNV*)(pAccelerationStructures), (VkQueryType)(queryType), (VkQueryPool)(queryPool), firstQuery)); }
inline Result compileDeferredNV(Device device, Pipeline pipeline, uint32_t shader, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCompileDeferredNV, (VkDevice)(device), (VkPipeline)(pipeline), shader)); }
inline Result getMemoryHostPointerPropertiesEXT(Device device, ExternalMemoryHandleTypeBits handleType, const void* pHostPointer, MemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetMemoryHostPointerPropertiesEXT, (VkDevice)(device), (VkExternalMemoryHandleTypeFlagBits)(handleType), (const void*)(pHostPointer), (VkMemoryHostPointerPropertiesEXT*)(pMemoryHostPointerProperties))); }
inline void cmdWriteBufferMarkerAMD(CommandBuffer commandBuffer, PipelineStageBits pipelineStage, Buffer dstBuffer, DeviceSize dstOffset, uint32_t marker, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdWriteBufferMarkerAMD, (VkCommandBuffer)(commandBuffer), (VkPipelineStageFlagBits)(pipelineStage), (VkBuffer)(dstBuffer), dstOffset, marker)); }
inline Result getPhysicalDeviceCalibrateableTimeDomainsEXT(PhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, TimeDomainEXT* pTimeDomains, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceCalibrateableTimeDomainsEXT, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pTimeDomainCount), (VkTimeDomainEXT*)(pTimeDomains))); }
inline Result getCalibratedTimestampsEXT(Device device, uint32_t timestampCount, const CalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetCalibratedTimestampsEXT, (VkDevice)(device), timestampCount, (const VkCalibratedTimestampInfoEXT*)(pTimestampInfos), (uint64_t*)(pTimestamps), (uint64_t*)(pMaxDeviation))); }
inline void cmdDrawMeshTasksNV(CommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawMeshTasksNV, (VkCommandBuffer)(commandBuffer), taskCount, firstTask)); }
inline void cmdDrawMeshTasksIndirectNV(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, uint32_t drawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawMeshTasksIndirectNV, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, drawCount, stride)); }
inline void cmdDrawMeshTasksIndirectCountNV(CommandBuffer commandBuffer, Buffer buffer, DeviceSize offset, Buffer countBuffer, DeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawMeshTasksIndirectCountNV, (VkCommandBuffer)(commandBuffer), (VkBuffer)(buffer), offset, (VkBuffer)(countBuffer), countBufferOffset, maxDrawCount, stride)); }
inline void cmdSetExclusiveScissorNV(CommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const Rect2D* pExclusiveScissors, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetExclusiveScissorNV, (VkCommandBuffer)(commandBuffer), firstExclusiveScissor, exclusiveScissorCount, (const VkRect2D*)(pExclusiveScissors))); }
inline void cmdSetCheckpointNV(CommandBuffer commandBuffer, const void* pCheckpointMarker, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetCheckpointNV, (VkCommandBuffer)(commandBuffer), (const void*)(pCheckpointMarker))); }
inline void getQueueCheckpointDataNV(Queue queue, uint32_t* pCheckpointDataCount, CheckpointDataNV* pCheckpointData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetQueueCheckpointDataNV, (VkQueue)(queue), (uint32_t*)(pCheckpointDataCount), (VkCheckpointDataNV*)(pCheckpointData))); }
inline Result initializePerformanceApiINTEL(Device device, const InitializePerformanceApiInfoINTEL* pInitializeInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkInitializePerformanceApiINTEL, (VkDevice)(device), (const VkInitializePerformanceApiInfoINTEL*)(pInitializeInfo))); }
inline void uninitializePerformanceApiINTEL(Device device, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkUninitializePerformanceApiINTEL, (VkDevice)(device))); }
inline Result cmdSetPerformanceMarkerINTEL(CommandBuffer commandBuffer, const PerformanceMarkerInfoINTEL* pMarkerInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetPerformanceMarkerINTEL, (VkCommandBuffer)(commandBuffer), (const VkPerformanceMarkerInfoINTEL*)(pMarkerInfo))); }
inline Result cmdSetPerformanceStreamMarkerINTEL(CommandBuffer commandBuffer, const PerformanceStreamMarkerInfoINTEL* pMarkerInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetPerformanceStreamMarkerINTEL, (VkCommandBuffer)(commandBuffer), (const VkPerformanceStreamMarkerInfoINTEL*)(pMarkerInfo))); }
inline Result cmdSetPerformanceOverrideINTEL(CommandBuffer commandBuffer, const PerformanceOverrideInfoINTEL* pOverrideInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetPerformanceOverrideINTEL, (VkCommandBuffer)(commandBuffer), (const VkPerformanceOverrideInfoINTEL*)(pOverrideInfo))); }
inline Result acquirePerformanceConfigurationINTEL(Device device, const PerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, PerformanceConfigurationINTEL* pConfiguration, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkAcquirePerformanceConfigurationINTEL, (VkDevice)(device), (const VkPerformanceConfigurationAcquireInfoINTEL*)(pAcquireInfo), (VkPerformanceConfigurationINTEL*)(pConfiguration))); }
inline Result releasePerformanceConfigurationINTEL(Device device, PerformanceConfigurationINTEL configuration, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkReleasePerformanceConfigurationINTEL, (VkDevice)(device), (VkPerformanceConfigurationINTEL)(configuration))); }
inline Result queueSetPerformanceConfigurationINTEL(Queue queue, PerformanceConfigurationINTEL configuration, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkQueueSetPerformanceConfigurationINTEL, (VkQueue)(queue), (VkPerformanceConfigurationINTEL)(configuration))); }
inline Result getPerformanceParameterINTEL(Device device, PerformanceParameterTypeINTEL parameter, PerformanceValueINTEL* pValue, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPerformanceParameterINTEL, (VkDevice)(device), (VkPerformanceParameterTypeINTEL)(parameter), (VkPerformanceValueINTEL*)(pValue))); }
inline void setLocalDimmingAMD(Device device, SwapchainKHR swapChain, Bool32 localDimmingEnable, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetLocalDimmingAMD, (VkDevice)(device), (VkSwapchainKHR)(swapChain), localDimmingEnable)); }

#ifdef VK_USE_PLATFORM_FUCHSIA
inline Result createImagePipeSurfaceFUCHSIA(Instance instance, const ImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateImagePipeSurfaceFUCHSIA, (VkInstance)(instance), (const VkImagePipeSurfaceCreateInfoFUCHSIA*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
#endif //VK_USE_PLATFORM_FUCHSIA

inline Result getPhysicalDeviceFragmentShadingRatesKHR(PhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, PhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceFragmentShadingRatesKHR, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pFragmentShadingRateCount), (VkPhysicalDeviceFragmentShadingRateKHR*)(pFragmentShadingRates))); }
inline void cmdSetFragmentShadingRateKHR(CommandBuffer commandBuffer, const Extent2D* pFragmentSize, const FragmentShadingRateCombinerOpKHR combinerOps[ 2], DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetFragmentShadingRateKHR, (VkCommandBuffer)(commandBuffer), (const VkExtent2D*)(pFragmentSize), (const VkFragmentShadingRateCombinerOpKHR*)(combinerOps))); }
inline Result waitForPresentKHR(Device device, SwapchainKHR swapchain, uint64_t presentId, uint64_t timeout, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkWaitForPresentKHR, (VkDevice)(device), (VkSwapchainKHR)(swapchain), presentId, timeout)); }
inline Result getPhysicalDeviceCooperativeMatrixPropertiesNV(PhysicalDevice physicalDevice, uint32_t* pPropertyCount, CooperativeMatrixPropertiesNV* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceCooperativeMatrixPropertiesNV, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pPropertyCount), (VkCooperativeMatrixPropertiesNV*)(pProperties))); }
inline Result getPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(PhysicalDevice physicalDevice, uint32_t* pCombinationCount, FramebufferMixedSamplesCombinationNV* pCombinations, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV, (VkPhysicalDevice)(physicalDevice), (uint32_t*)(pCombinationCount), (VkFramebufferMixedSamplesCombinationNV*)(pCombinations))); }

#ifdef VK_USE_PLATFORM_WIN32_KHR
inline Result getPhysicalDeviceSurfacePresentModes2EXT(PhysicalDevice physicalDevice, const PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pPresentModeCount, PresentModeKHR* pPresentModes, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceSurfacePresentModes2EXT, (VkPhysicalDevice)(physicalDevice), (const VkPhysicalDeviceSurfaceInfo2KHR*)(pSurfaceInfo), (uint32_t*)(pPresentModeCount), (VkPresentModeKHR*)(pPresentModes))); }
inline Result acquireFullScreenExclusiveModeEXT(Device device, SwapchainKHR swapchain, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkAcquireFullScreenExclusiveModeEXT, (VkDevice)(device), (VkSwapchainKHR)(swapchain))); }
inline Result releaseFullScreenExclusiveModeEXT(Device device, SwapchainKHR swapchain, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkReleaseFullScreenExclusiveModeEXT, (VkDevice)(device), (VkSwapchainKHR)(swapchain))); }
inline Result getDeviceGroupSurfacePresentModes2EXT(Device device, const PhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, DeviceGroupPresentModeFlagsKHR* pModes, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceGroupSurfacePresentModes2EXT, (VkDevice)(device), (const VkPhysicalDeviceSurfaceInfo2KHR*)(pSurfaceInfo), (VkDeviceGroupPresentModeFlagsKHR*)(pModes))); }
#endif //VK_USE_PLATFORM_WIN32_KHR

inline Result createHeadlessSurfaceEXT(Instance instance, const HeadlessSurfaceCreateInfoEXT* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateHeadlessSurfaceEXT, (VkInstance)(instance), (const VkHeadlessSurfaceCreateInfoEXT*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
inline void cmdSetLineStippleEXT(CommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetLineStippleEXT, (VkCommandBuffer)(commandBuffer), lineStippleFactor, lineStipplePattern)); }
inline Result createDeferredOperationKHR(Device device, const AllocationCallbacks* pAllocator, DeferredOperationKHR* pDeferredOperation, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateDeferredOperationKHR, (VkDevice)(device), (const VkAllocationCallbacks*)(pAllocator), (VkDeferredOperationKHR*)(pDeferredOperation))); }
inline void destroyDeferredOperationKHR(Device device, DeferredOperationKHR operation, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyDeferredOperationKHR, (VkDevice)(device), (VkDeferredOperationKHR)(operation), (const VkAllocationCallbacks*)(pAllocator))); }
inline uint32_t getDeferredOperationMaxConcurrencyKHR(Device device, DeferredOperationKHR operation, DynamicDispatch* dispatcher = {}){ return (uint32_t)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeferredOperationMaxConcurrencyKHR, (VkDevice)(device), (VkDeferredOperationKHR)(operation))); }
inline Result getDeferredOperationResultKHR(Device device, DeferredOperationKHR operation, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeferredOperationResultKHR, (VkDevice)(device), (VkDeferredOperationKHR)(operation))); }
inline Result deferredOperationJoinKHR(Device device, DeferredOperationKHR operation, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDeferredOperationJoinKHR, (VkDevice)(device), (VkDeferredOperationKHR)(operation))); }
inline Result getPipelineExecutablePropertiesKHR(Device device, const PipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, PipelineExecutablePropertiesKHR* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPipelineExecutablePropertiesKHR, (VkDevice)(device), (const VkPipelineInfoKHR*)(pPipelineInfo), (uint32_t*)(pExecutableCount), (VkPipelineExecutablePropertiesKHR*)(pProperties))); }
inline Result getPipelineExecutableStatisticsKHR(Device device, const PipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, PipelineExecutableStatisticKHR* pStatistics, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPipelineExecutableStatisticsKHR, (VkDevice)(device), (const VkPipelineExecutableInfoKHR*)(pExecutableInfo), (uint32_t*)(pStatisticCount), (VkPipelineExecutableStatisticKHR*)(pStatistics))); }
inline Result getPipelineExecutableInternalRepresentationsKHR(Device device, const PipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, PipelineExecutableInternalRepresentationKHR* pInternalRepresentations, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPipelineExecutableInternalRepresentationsKHR, (VkDevice)(device), (const VkPipelineExecutableInfoKHR*)(pExecutableInfo), (uint32_t*)(pInternalRepresentationCount), (VkPipelineExecutableInternalRepresentationKHR*)(pInternalRepresentations))); }
inline void getGeneratedCommandsMemoryRequirementsNV(Device device, const GeneratedCommandsMemoryRequirementsInfoNV* pInfo, MemoryRequirements2* pMemoryRequirements, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetGeneratedCommandsMemoryRequirementsNV, (VkDevice)(device), (const VkGeneratedCommandsMemoryRequirementsInfoNV*)(pInfo), (VkMemoryRequirements2*)(pMemoryRequirements))); }
inline void cmdPreprocessGeneratedCommandsNV(CommandBuffer commandBuffer, const GeneratedCommandsInfoNV* pGeneratedCommandsInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdPreprocessGeneratedCommandsNV, (VkCommandBuffer)(commandBuffer), (const VkGeneratedCommandsInfoNV*)(pGeneratedCommandsInfo))); }
inline void cmdExecuteGeneratedCommandsNV(CommandBuffer commandBuffer, Bool32 isPreprocessed, const GeneratedCommandsInfoNV* pGeneratedCommandsInfo, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdExecuteGeneratedCommandsNV, (VkCommandBuffer)(commandBuffer), isPreprocessed, (const VkGeneratedCommandsInfoNV*)(pGeneratedCommandsInfo))); }
inline void cmdBindPipelineShaderGroupNV(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline, uint32_t groupIndex, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBindPipelineShaderGroupNV, (VkCommandBuffer)(commandBuffer), (VkPipelineBindPoint)(pipelineBindPoint), (VkPipeline)(pipeline), groupIndex)); }
inline Result createIndirectCommandsLayoutNV(Device device, const IndirectCommandsLayoutCreateInfoNV* pCreateInfo, const AllocationCallbacks* pAllocator, IndirectCommandsLayoutNV* pIndirectCommandsLayout, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateIndirectCommandsLayoutNV, (VkDevice)(device), (const VkIndirectCommandsLayoutCreateInfoNV*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkIndirectCommandsLayoutNV*)(pIndirectCommandsLayout))); }
inline void destroyIndirectCommandsLayoutNV(Device device, IndirectCommandsLayoutNV indirectCommandsLayout, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyIndirectCommandsLayoutNV, (VkDevice)(device), (VkIndirectCommandsLayoutNV)(indirectCommandsLayout), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result acquireDrmDisplayEXT(PhysicalDevice physicalDevice, int32_t drmFd, DisplayKHR display, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkAcquireDrmDisplayEXT, (VkPhysicalDevice)(physicalDevice), drmFd, (VkDisplayKHR)(display))); }
inline Result getDrmDisplayEXT(PhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, DisplayKHR* display, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDrmDisplayEXT, (VkPhysicalDevice)(physicalDevice), drmFd, connectorId, (VkDisplayKHR*)(display))); }
inline void cmdWriteBufferMarker2AMD(CommandBuffer commandBuffer, PipelineStageFlags2 stage, Buffer dstBuffer, DeviceSize dstOffset, uint32_t marker, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdWriteBufferMarker2AMD, (VkCommandBuffer)(commandBuffer), (VkPipelineStageFlags2)(stage), (VkBuffer)(dstBuffer), dstOffset, marker)); }
inline void getQueueCheckpointData2NV(Queue queue, uint32_t* pCheckpointDataCount, CheckpointData2NV* pCheckpointData, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetQueueCheckpointData2NV, (VkQueue)(queue), (uint32_t*)(pCheckpointDataCount), (VkCheckpointData2NV*)(pCheckpointData))); }
inline void cmdSetFragmentShadingRateEnumNV(CommandBuffer commandBuffer, FragmentShadingRateNV shadingRate, const FragmentShadingRateCombinerOpKHR combinerOps[ 2], DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetFragmentShadingRateEnumNV, (VkCommandBuffer)(commandBuffer), (VkFragmentShadingRateNV)(shadingRate), (const VkFragmentShadingRateCombinerOpKHR*)(combinerOps))); }

#ifdef VK_USE_PLATFORM_WIN32_KHR
inline Result acquireWinrtDisplayNV(PhysicalDevice physicalDevice, DisplayKHR display, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkAcquireWinrtDisplayNV, (VkPhysicalDevice)(physicalDevice), (VkDisplayKHR)(display))); }
inline Result getWinrtDisplayNV(PhysicalDevice physicalDevice, uint32_t deviceRelativeId, DisplayKHR* pDisplay, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetWinrtDisplayNV, (VkPhysicalDevice)(physicalDevice), deviceRelativeId, (VkDisplayKHR*)(pDisplay))); }
#endif //VK_USE_PLATFORM_WIN32_KHR


#ifdef VK_USE_PLATFORM_DIRECTFB_EXT
inline Result createDirectFBSurfaceEXT(Instance instance, const DirectFBSurfaceCreateInfoEXT* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateDirectFBSurfaceEXT, (VkInstance)(instance), (const VkDirectFBSurfaceCreateInfoEXT*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
inline Bool32 getPhysicalDeviceDirectFBPresentationSupportEXT(PhysicalDevice physicalDevice, uint32_t queueFamilyIndex, IDirectFB* dfb, DynamicDispatch* dispatcher = {}){ return (Bool32)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceDirectFBPresentationSupportEXT, (VkPhysicalDevice)(physicalDevice), queueFamilyIndex, (IDirectFB*)(dfb))); }
#endif //VK_USE_PLATFORM_DIRECTFB_EXT

inline void cmdSetVertexInputEXT(CommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VertexInputAttributeDescription2EXT* pVertexAttributeDescriptions, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetVertexInputEXT, (VkCommandBuffer)(commandBuffer), vertexBindingDescriptionCount, (const VkVertexInputBindingDescription2EXT*)(pVertexBindingDescriptions), vertexAttributeDescriptionCount, (const VkVertexInputAttributeDescription2EXT*)(pVertexAttributeDescriptions))); }

#ifdef VK_USE_PLATFORM_FUCHSIA
inline Result getMemoryZirconHandleFUCHSIA(Device device, const MemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetMemoryZirconHandleFUCHSIA, (VkDevice)(device), (const VkMemoryGetZirconHandleInfoFUCHSIA*)(pGetZirconHandleInfo), (zx_handle_t*)(pZirconHandle))); }
inline Result getMemoryZirconHandlePropertiesFUCHSIA(Device device, ExternalMemoryHandleTypeBits handleType, zx_handle_t zirconHandle, MemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetMemoryZirconHandlePropertiesFUCHSIA, (VkDevice)(device), (VkExternalMemoryHandleTypeFlagBits)(handleType), zirconHandle, (VkMemoryZirconHandlePropertiesFUCHSIA*)(pMemoryZirconHandleProperties))); }
#endif //VK_USE_PLATFORM_FUCHSIA


#ifdef VK_USE_PLATFORM_FUCHSIA
inline Result importSemaphoreZirconHandleFUCHSIA(Device device, const ImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkImportSemaphoreZirconHandleFUCHSIA, (VkDevice)(device), (const VkImportSemaphoreZirconHandleInfoFUCHSIA*)(pImportSemaphoreZirconHandleInfo))); }
inline Result getSemaphoreZirconHandleFUCHSIA(Device device, const SemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetSemaphoreZirconHandleFUCHSIA, (VkDevice)(device), (const VkSemaphoreGetZirconHandleInfoFUCHSIA*)(pGetZirconHandleInfo), (zx_handle_t*)(pZirconHandle))); }
#endif //VK_USE_PLATFORM_FUCHSIA


#ifdef VK_USE_PLATFORM_FUCHSIA
inline Result createBufferCollectionFUCHSIA(Device device, const BufferCollectionCreateInfoFUCHSIA* pCreateInfo, const AllocationCallbacks* pAllocator, BufferCollectionFUCHSIA* pCollection, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateBufferCollectionFUCHSIA, (VkDevice)(device), (const VkBufferCollectionCreateInfoFUCHSIA*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkBufferCollectionFUCHSIA*)(pCollection))); }
inline Result setBufferCollectionImageConstraintsFUCHSIA(Device device, BufferCollectionFUCHSIA collection, const ImageConstraintsInfoFUCHSIA* pImageConstraintsInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetBufferCollectionImageConstraintsFUCHSIA, (VkDevice)(device), (VkBufferCollectionFUCHSIA)(collection), (const VkImageConstraintsInfoFUCHSIA*)(pImageConstraintsInfo))); }
inline Result setBufferCollectionBufferConstraintsFUCHSIA(Device device, BufferCollectionFUCHSIA collection, const BufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetBufferCollectionBufferConstraintsFUCHSIA, (VkDevice)(device), (VkBufferCollectionFUCHSIA)(collection), (const VkBufferConstraintsInfoFUCHSIA*)(pBufferConstraintsInfo))); }
inline void destroyBufferCollectionFUCHSIA(Device device, BufferCollectionFUCHSIA collection, const AllocationCallbacks* pAllocator, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkDestroyBufferCollectionFUCHSIA, (VkDevice)(device), (VkBufferCollectionFUCHSIA)(collection), (const VkAllocationCallbacks*)(pAllocator))); }
inline Result getBufferCollectionPropertiesFUCHSIA(Device device, BufferCollectionFUCHSIA collection, BufferCollectionPropertiesFUCHSIA* pProperties, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetBufferCollectionPropertiesFUCHSIA, (VkDevice)(device), (VkBufferCollectionFUCHSIA)(collection), (VkBufferCollectionPropertiesFUCHSIA*)(pProperties))); }
#endif //VK_USE_PLATFORM_FUCHSIA

inline Result getDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(Device device, RenderPass renderpass, Extent2D* pMaxWorkgroupSize, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI, (VkDevice)(device), (VkRenderPass)(renderpass), (VkExtent2D*)(pMaxWorkgroupSize))); }
inline void cmdSubpassShadingHUAWEI(CommandBuffer commandBuffer, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSubpassShadingHUAWEI, (VkCommandBuffer)(commandBuffer))); }
inline void cmdBindInvocationMaskHUAWEI(CommandBuffer commandBuffer, ImageView imageView, ImageLayout imageLayout, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdBindInvocationMaskHUAWEI, (VkCommandBuffer)(commandBuffer), (VkImageView)(imageView), (VkImageLayout)(imageLayout))); }
inline void cmdSetPatchControlPointsEXT(CommandBuffer commandBuffer, uint32_t patchControlPoints, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetPatchControlPointsEXT, (VkCommandBuffer)(commandBuffer), patchControlPoints)); }
inline void cmdSetLogicOpEXT(CommandBuffer commandBuffer, LogicOp logicOp, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetLogicOpEXT, (VkCommandBuffer)(commandBuffer), (VkLogicOp)(logicOp))); }

#ifdef VK_USE_PLATFORM_SCREEN_QNX
inline Result createScreenSurfaceQNX(Instance instance, const ScreenSurfaceCreateInfoQNX* pCreateInfo, const AllocationCallbacks* pAllocator, SurfaceKHR* pSurface, DynamicDispatch* dispatcher = {}){ return (Result)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCreateScreenSurfaceQNX, (VkInstance)(instance), (const VkScreenSurfaceCreateInfoQNX*)(pCreateInfo), (const VkAllocationCallbacks*)(pAllocator), (VkSurfaceKHR*)(pSurface))); }
inline Bool32 getPhysicalDeviceScreenPresentationSupportQNX(PhysicalDevice physicalDevice, uint32_t queueFamilyIndex, _screen_window* window, DynamicDispatch* dispatcher = {}){ return (Bool32)(VKPP_DISPATCH_GLOBAL(dispatcher, vkGetPhysicalDeviceScreenPresentationSupportQNX, (VkPhysicalDevice)(physicalDevice), queueFamilyIndex, (_screen_window*)(window))); }
#endif //VK_USE_PLATFORM_SCREEN_QNX

inline void cmdSetColorWriteEnableEXT(CommandBuffer commandBuffer, uint32_t attachmentCount, const Bool32* pColorWriteEnables, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdSetColorWriteEnableEXT, (VkCommandBuffer)(commandBuffer), attachmentCount, (const VkBool32*)(pColorWriteEnables))); }
inline void cmdDrawMultiEXT(CommandBuffer commandBuffer, uint32_t drawCount, const MultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawMultiEXT, (VkCommandBuffer)(commandBuffer), drawCount, (const VkMultiDrawInfoEXT*)(pVertexInfo), instanceCount, firstInstance, stride)); }
inline void cmdDrawMultiIndexedEXT(CommandBuffer commandBuffer, uint32_t drawCount, const MultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkCmdDrawMultiIndexedEXT, (VkCommandBuffer)(commandBuffer), drawCount, (const VkMultiDrawIndexedInfoEXT*)(pIndexInfo), instanceCount, firstInstance, stride, (const int32_t*)(pVertexOffset))); }
inline void setDeviceMemoryPriorityEXT(Device device, DeviceMemory memory, float priority, DynamicDispatch* dispatcher = {}){ return (void)(VKPP_DISPATCH_GLOBAL(dispatcher, vkSetDeviceMemoryPriorityEXT, (VkDevice)(device), (VkDeviceMemory)(memory), priority)); }
} // namespace raw

} // namespace vk

// The specification (vk.xml) itself is published under the following license:

// Copyright 2015-2022 The Khronos Group Inc.
// SPDX-License-Identifier: Apache-2.0 OR MIT
    